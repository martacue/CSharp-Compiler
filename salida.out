Grammar:

Rule 0     S' -> program
Rule 1     program -> using_directives namespace_declarations
Rule 2     program -> namespace_declarations
Rule 3     using_directive -> USING TYPEID
Rule 4     using_directives -> using_directive
Rule 5     using_directives -> using_directive ; using_directives
Rule 6     namespace_declaration -> NAMESPACE TYPEID { clases }
Rule 7     namespace_declarations -> namespace_declaration
Rule 8     namespace_declarations -> namespace_declarations namespace_declaration
Rule 9     clase -> CLASS TYPEID : TYPEID { metodos }
Rule 10    clase -> CLASS TYPEID { metodos }
Rule 11    clase -> CLASS TYPEID : TYPEID { atributos }
Rule 12    clase -> CLASS TYPEID { atributos }
Rule 13    clase -> CLASS TYPEID : TYPEID { atributos metodos }
Rule 14    clase -> CLASS TYPEID { atributos metodos }
Rule 15    clases -> clase
Rule 16    clases -> clases clase
Rule 17    atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr ;
Rule 18    atributo -> MODIFIER TYPEID OBJECTID ;
Rule 19    atributos -> atributo
Rule 20    atributos -> atributos atributo
Rule 21    metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
Rule 22    metodo -> MODIFIER TYPEID VOID ( formales ) { expr }
Rule 23    metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr }
Rule 24    metodo -> MODIFIER VOID OBJECTID ( ) { expr }
Rule 25    metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
Rule 26    metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr }
Rule 27    metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
Rule 28    metodo -> MODIFIER TYPEID OBJECTID ( ) { expr }
Rule 29    metodos -> metodo
Rule 30    metodos -> metodos metodo
Rule 31    formal -> TYPEID OBJECTID
Rule 32    formales -> formal
Rule 33    formales -> formales , formal
Rule 34    expr -> exprApoyo2
Rule 35    expr -> BOOL_CONST
Rule 36    expr -> STR_CONST
Rule 37    expr -> FLOAT_CONST
Rule 38    expr -> INT_CONST
Rule 39    expr -> OBJECTID
Rule 40    expr -> expr OR expr  [precedence=left, level=2]
Rule 41    expr -> expr AND expr  [precedence=left, level=3]
Rule 42    expr -> expr LE expr  [precedence=nonassoc, level=5]
Rule 43    expr -> expr DIFFERENT expr  [precedence=left, level=4]
Rule 44    expr -> expr EQUALS expr  [precedence=left, level=4]
Rule 45    expr -> ! expr  [precedence=right, level=8]
Rule 46    expr -> expr / expr  [precedence=left, level=7]
Rule 47    expr -> expr * expr  [precedence=left, level=7]
Rule 48    expr -> expr - expr  [precedence=left, level=6]
Rule 49    expr -> expr + expr  [precedence=left, level=6]
Rule 50    expr -> NEW OBJECTID
Rule 51    expr -> { exprApoyo3 } ;
Rule 52    expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
Rule 53    expr -> SWITCH ( expr ) { cases }
Rule 54    expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
Rule 55    expr -> WHILE ( expr ) { expr }
Rule 56    expr -> IF ( expr ) { expr } ELSE { expr }
Rule 57    expr -> RETURN expr ;
Rule 58    expr -> TYPEID . OBJECTID ( exprApoyo1 ) ;
Rule 59    expr -> TYPEID . OBJECTID ( ) ;
Rule 60    expr -> expr . OBJECTID ( exprApoyo1 ) ;
Rule 61    expr -> OBJECTID ( exprApoyo1 ) ;
Rule 62    expr -> expr . OBJECTID ( ) ;
Rule 63    expr -> OBJECTID ( ) ;
Rule 64    expr -> OBJECTID ASSIGN expr ;
Rule 65    case -> DEFAULT : expr BREAK ;
Rule 66    case -> CASE expr : expr BREAK ;
Rule 67    cases -> case
Rule 68    cases -> cases case
Rule 69    exprApoyo3 -> exprApoyo3 , FLOAT_CONST
Rule 70    exprApoyo3 -> FLOAT_CONST , FLOAT_CONST
Rule 71    exprApoyo3 -> exprApoyo3 , INT_CONST
Rule 72    exprApoyo3 -> INT_CONST , INT_CONST
Rule 73    exprApoyo3 -> exprApoyo3 , STR_CONST
Rule 74    exprApoyo3 -> STR_CONST , STR_CONST
Rule 75    exprApoyo2 -> exprApoyo2 expr
Rule 76    exprApoyo2 -> expr expr
Rule 77    exprApoyo1 -> expr
Rule 78    exprApoyo1 -> exprApoyo1 , expr

Terminals, with rules where they appear:

!                    : 45
(                    : 21 22 23 24 25 26 27 28 53 54 55 56 58 59 60 61 62 63
)                    : 21 22 23 24 25 26 27 28 53 54 55 56 58 59 60 61 62 63
*                    : 47
+                    : 49
,                    : 33 52 69 70 71 72 73 74 78
-                    : 48
.                    : 58 59 60 62
/                    : 46
:                    : 9 11 13 65 66
;                    : 5 17 18 51 52 57 58 59 60 61 62 63 64 65 66
<                    : 52
>                    : 52
AND                  : 41
ARROW                : 52
ASSIGN               : 17 52 64
BOOL_CONST           : 35
BREAK                : 65 66
CASE                 : 66
CLASS                : 9 10 11 12 13 14
DEFAULT              : 65
DIFFERENT            : 43
ELSE                 : 56
EQUALS               : 44
FLOAT_CONST          : 37 69 70 70
FOREACH              : 54
FUNCT                : 52
IF                   : 56
IN                   : 54
INT_CONST            : 38 71 72 72
LE                   : 42
MODIFIER             : 17 18 21 22 23 24 25 26 27 28
NAMESPACE            : 6
NEW                  : 50
OBJECTID             : 17 18 21 23 24 25 26 27 28 31 39 50 52 52 54 54 58 59 60 61 62 63 64
OR                   : 40
RETURN               : 57
STATIC               : 21 23 25 27
STR_CONST            : 36 73 74 74
SWITCH               : 53
TYPEID               : 3 6 9 9 10 11 11 12 13 13 14 17 18 22 25 26 27 28 31 52 52 54 58 59
USING                : 3
VOID                 : 21 22 23 24
WHILE                : 55
error                : 
{                    : 6 9 10 11 12 13 14 21 22 23 24 25 26 27 28 51 53 54 55 56 56
}                    : 6 9 10 11 12 13 14 21 22 23 24 25 26 27 28 51 53 54 55 56 56

Nonterminals, with rules where they appear:

atributo             : 19 20
atributos            : 11 12 13 14 20
case                 : 67 68
cases                : 53 68
clase                : 15 16
clases               : 6 16
expr                 : 17 21 22 23 24 25 26 27 28 40 40 41 41 42 42 43 43 44 44 45 46 46 47 47 48 48 49 49 52 53 54 55 55 56 56 56 57 60 62 64 65 66 66 75 76 76 77 78
exprApoyo1           : 58 60 61 78
exprApoyo2           : 34 75
exprApoyo3           : 51 69 71 73
formal               : 32 33
formales             : 21 22 25 26 33
metodo               : 29 30
metodos              : 9 10 13 14 30
namespace_declaration : 7 8
namespace_declarations : 1 2 8
program              : 0
using_directive      : 4 5
using_directives     : 1 5


state 0

    (0) S' -> . program
    (1) program -> . using_directives namespace_declarations
    (2) program -> . namespace_declarations
    (4) using_directives -> . using_directive
    (5) using_directives -> . using_directive ; using_directives
    (7) namespace_declarations -> . namespace_declaration
    (8) namespace_declarations -> . namespace_declarations namespace_declaration
    (3) using_directive -> . USING TYPEID
    (6) namespace_declaration -> . NAMESPACE TYPEID { clases }
    USING           shift and go to state 6
    NAMESPACE       shift and go to state 7

    program                        shift and go to state 1
    using_directives               shift and go to state 2
    namespace_declarations         shift and go to state 3
    using_directive                shift and go to state 4
    namespace_declaration          shift and go to state 5

state 1

    (0) S' -> program .


state 2

    (1) program -> using_directives . namespace_declarations
    (7) namespace_declarations -> . namespace_declaration
    (8) namespace_declarations -> . namespace_declarations namespace_declaration
    (6) namespace_declaration -> . NAMESPACE TYPEID { clases }
    NAMESPACE       shift and go to state 7

    namespace_declarations         shift and go to state 8
    namespace_declaration          shift and go to state 5

state 3

    (2) program -> namespace_declarations .
    (8) namespace_declarations -> namespace_declarations . namespace_declaration
    (6) namespace_declaration -> . NAMESPACE TYPEID { clases }
    $end            reduce using rule 2 (program -> namespace_declarations .)
    NAMESPACE       shift and go to state 7

    namespace_declaration          shift and go to state 9

state 4

    (4) using_directives -> using_directive .
    (5) using_directives -> using_directive . ; using_directives
    NAMESPACE       reduce using rule 4 (using_directives -> using_directive .)
    ;               shift and go to state 10


state 5

    (7) namespace_declarations -> namespace_declaration .
    NAMESPACE       reduce using rule 7 (namespace_declarations -> namespace_declaration .)
    $end            reduce using rule 7 (namespace_declarations -> namespace_declaration .)


state 6

    (3) using_directive -> USING . TYPEID
    TYPEID          shift and go to state 11


state 7

    (6) namespace_declaration -> NAMESPACE . TYPEID { clases }
    TYPEID          shift and go to state 12


state 8

    (1) program -> using_directives namespace_declarations .
    (8) namespace_declarations -> namespace_declarations . namespace_declaration
    (6) namespace_declaration -> . NAMESPACE TYPEID { clases }
    $end            reduce using rule 1 (program -> using_directives namespace_declarations .)
    NAMESPACE       shift and go to state 7

    namespace_declaration          shift and go to state 9

state 9

    (8) namespace_declarations -> namespace_declarations namespace_declaration .
    NAMESPACE       reduce using rule 8 (namespace_declarations -> namespace_declarations namespace_declaration .)
    $end            reduce using rule 8 (namespace_declarations -> namespace_declarations namespace_declaration .)


state 10

    (5) using_directives -> using_directive ; . using_directives
    (4) using_directives -> . using_directive
    (5) using_directives -> . using_directive ; using_directives
    (3) using_directive -> . USING TYPEID
    USING           shift and go to state 6

    using_directive                shift and go to state 4
    using_directives               shift and go to state 13

state 11

    (3) using_directive -> USING TYPEID .
    ;               reduce using rule 3 (using_directive -> USING TYPEID .)
    NAMESPACE       reduce using rule 3 (using_directive -> USING TYPEID .)


state 12

    (6) namespace_declaration -> NAMESPACE TYPEID . { clases }
    {               shift and go to state 14


state 13

    (5) using_directives -> using_directive ; using_directives .
    NAMESPACE       reduce using rule 5 (using_directives -> using_directive ; using_directives .)


state 14

    (6) namespace_declaration -> NAMESPACE TYPEID { . clases }
    (15) clases -> . clase
    (16) clases -> . clases clase
    (9) clase -> . CLASS TYPEID : TYPEID { metodos }
    (10) clase -> . CLASS TYPEID { metodos }
    (11) clase -> . CLASS TYPEID : TYPEID { atributos }
    (12) clase -> . CLASS TYPEID { atributos }
    (13) clase -> . CLASS TYPEID : TYPEID { atributos metodos }
    (14) clase -> . CLASS TYPEID { atributos metodos }
    CLASS           shift and go to state 17

    clases                         shift and go to state 15
    clase                          shift and go to state 16

state 15

    (6) namespace_declaration -> NAMESPACE TYPEID { clases . }
    (16) clases -> clases . clase
    (9) clase -> . CLASS TYPEID : TYPEID { metodos }
    (10) clase -> . CLASS TYPEID { metodos }
    (11) clase -> . CLASS TYPEID : TYPEID { atributos }
    (12) clase -> . CLASS TYPEID { atributos }
    (13) clase -> . CLASS TYPEID : TYPEID { atributos metodos }
    (14) clase -> . CLASS TYPEID { atributos metodos }
    }               shift and go to state 18
    CLASS           shift and go to state 17

    clase                          shift and go to state 19

state 16

    (15) clases -> clase .
    }               reduce using rule 15 (clases -> clase .)
    CLASS           reduce using rule 15 (clases -> clase .)


state 17

    (9) clase -> CLASS . TYPEID : TYPEID { metodos }
    (10) clase -> CLASS . TYPEID { metodos }
    (11) clase -> CLASS . TYPEID : TYPEID { atributos }
    (12) clase -> CLASS . TYPEID { atributos }
    (13) clase -> CLASS . TYPEID : TYPEID { atributos metodos }
    (14) clase -> CLASS . TYPEID { atributos metodos }
    TYPEID          shift and go to state 20


state 18

    (6) namespace_declaration -> NAMESPACE TYPEID { clases } .
    NAMESPACE       reduce using rule 6 (namespace_declaration -> NAMESPACE TYPEID { clases } .)
    $end            reduce using rule 6 (namespace_declaration -> NAMESPACE TYPEID { clases } .)


state 19

    (16) clases -> clases clase .
    }               reduce using rule 16 (clases -> clases clase .)
    CLASS           reduce using rule 16 (clases -> clases clase .)


state 20

    (9) clase -> CLASS TYPEID . : TYPEID { metodos }
    (10) clase -> CLASS TYPEID . { metodos }
    (11) clase -> CLASS TYPEID . : TYPEID { atributos }
    (12) clase -> CLASS TYPEID . { atributos }
    (13) clase -> CLASS TYPEID . : TYPEID { atributos metodos }
    (14) clase -> CLASS TYPEID . { atributos metodos }
    :               shift and go to state 21
    {               shift and go to state 22


state 21

    (9) clase -> CLASS TYPEID : . TYPEID { metodos }
    (11) clase -> CLASS TYPEID : . TYPEID { atributos }
    (13) clase -> CLASS TYPEID : . TYPEID { atributos metodos }
    TYPEID          shift and go to state 23


state 22

    (10) clase -> CLASS TYPEID { . metodos }
    (12) clase -> CLASS TYPEID { . atributos }
    (14) clase -> CLASS TYPEID { . atributos metodos }
    (29) metodos -> . metodo
    (30) metodos -> . metodos metodo
    (19) atributos -> . atributo
    (20) atributos -> . atributos atributo
    (21) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (25) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    (17) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (18) atributo -> . MODIFIER TYPEID OBJECTID ;
    MODIFIER        shift and go to state 28

    metodos                        shift and go to state 24
    atributos                      shift and go to state 25
    metodo                         shift and go to state 26
    atributo                       shift and go to state 27

state 23

    (9) clase -> CLASS TYPEID : TYPEID . { metodos }
    (11) clase -> CLASS TYPEID : TYPEID . { atributos }
    (13) clase -> CLASS TYPEID : TYPEID . { atributos metodos }
    {               shift and go to state 29


state 24

    (10) clase -> CLASS TYPEID { metodos . }
    (30) metodos -> metodos . metodo
    (21) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (25) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 30
    MODIFIER        shift and go to state 32

    metodo                         shift and go to state 31

state 25

    (12) clase -> CLASS TYPEID { atributos . }
    (14) clase -> CLASS TYPEID { atributos . metodos }
    (20) atributos -> atributos . atributo
    (29) metodos -> . metodo
    (30) metodos -> . metodos metodo
    (17) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (18) atributo -> . MODIFIER TYPEID OBJECTID ;
    (21) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (25) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 33
    MODIFIER        shift and go to state 36

    metodos                        shift and go to state 34
    atributo                       shift and go to state 35
    metodo                         shift and go to state 26

state 26

    (29) metodos -> metodo .
    }               reduce using rule 29 (metodos -> metodo .)
    MODIFIER        reduce using rule 29 (metodos -> metodo .)


state 27

    (19) atributos -> atributo .
    }               reduce using rule 19 (atributos -> atributo .)
    MODIFIER        reduce using rule 19 (atributos -> atributo .)


state 28

    (21) metodo -> MODIFIER . STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> MODIFIER . TYPEID VOID ( formales ) { expr }
    (23) metodo -> MODIFIER . STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> MODIFIER . VOID OBJECTID ( ) { expr }
    (25) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> MODIFIER . TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> MODIFIER . TYPEID OBJECTID ( ) { expr }
    (17) atributo -> MODIFIER . TYPEID OBJECTID ASSIGN expr ;
    (18) atributo -> MODIFIER . TYPEID OBJECTID ;
    STATIC          shift and go to state 37
    TYPEID          shift and go to state 39
    VOID            shift and go to state 38


state 29

    (9) clase -> CLASS TYPEID : TYPEID { . metodos }
    (11) clase -> CLASS TYPEID : TYPEID { . atributos }
    (13) clase -> CLASS TYPEID : TYPEID { . atributos metodos }
    (29) metodos -> . metodo
    (30) metodos -> . metodos metodo
    (19) atributos -> . atributo
    (20) atributos -> . atributos atributo
    (21) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (25) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    (17) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (18) atributo -> . MODIFIER TYPEID OBJECTID ;
    MODIFIER        shift and go to state 28

    metodos                        shift and go to state 40
    atributos                      shift and go to state 41
    metodo                         shift and go to state 26
    atributo                       shift and go to state 27

state 30

    (10) clase -> CLASS TYPEID { metodos } .
    }               reduce using rule 10 (clase -> CLASS TYPEID { metodos } .)
    CLASS           reduce using rule 10 (clase -> CLASS TYPEID { metodos } .)


state 31

    (30) metodos -> metodos metodo .
    }               reduce using rule 30 (metodos -> metodos metodo .)
    MODIFIER        reduce using rule 30 (metodos -> metodos metodo .)


state 32

    (21) metodo -> MODIFIER . STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> MODIFIER . TYPEID VOID ( formales ) { expr }
    (23) metodo -> MODIFIER . STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> MODIFIER . VOID OBJECTID ( ) { expr }
    (25) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> MODIFIER . TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> MODIFIER . TYPEID OBJECTID ( ) { expr }
    STATIC          shift and go to state 37
    TYPEID          shift and go to state 42
    VOID            shift and go to state 38


state 33

    (12) clase -> CLASS TYPEID { atributos } .
    }               reduce using rule 12 (clase -> CLASS TYPEID { atributos } .)
    CLASS           reduce using rule 12 (clase -> CLASS TYPEID { atributos } .)


state 34

    (14) clase -> CLASS TYPEID { atributos metodos . }
    (30) metodos -> metodos . metodo
    (21) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (25) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 43
    MODIFIER        shift and go to state 32

    metodo                         shift and go to state 31

state 35

    (20) atributos -> atributos atributo .
    }               reduce using rule 20 (atributos -> atributos atributo .)
    MODIFIER        reduce using rule 20 (atributos -> atributos atributo .)


state 36

    (17) atributo -> MODIFIER . TYPEID OBJECTID ASSIGN expr ;
    (18) atributo -> MODIFIER . TYPEID OBJECTID ;
    (21) metodo -> MODIFIER . STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> MODIFIER . TYPEID VOID ( formales ) { expr }
    (23) metodo -> MODIFIER . STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> MODIFIER . VOID OBJECTID ( ) { expr }
    (25) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> MODIFIER . TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> MODIFIER . TYPEID OBJECTID ( ) { expr }
    TYPEID          shift and go to state 44
    STATIC          shift and go to state 37
    VOID            shift and go to state 38


state 37

    (21) metodo -> MODIFIER STATIC . VOID OBJECTID ( formales ) { expr }
    (23) metodo -> MODIFIER STATIC . VOID OBJECTID ( ) { expr }
    (25) metodo -> MODIFIER STATIC . TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> MODIFIER STATIC . TYPEID OBJECTID ( ) { expr }
    VOID            shift and go to state 45
    TYPEID          shift and go to state 46


state 38

    (24) metodo -> MODIFIER VOID . OBJECTID ( ) { expr }
    OBJECTID        shift and go to state 47


state 39

    (22) metodo -> MODIFIER TYPEID . VOID ( formales ) { expr }
    (26) metodo -> MODIFIER TYPEID . OBJECTID ( formales ) { expr }
    (28) metodo -> MODIFIER TYPEID . OBJECTID ( ) { expr }
    (17) atributo -> MODIFIER TYPEID . OBJECTID ASSIGN expr ;
    (18) atributo -> MODIFIER TYPEID . OBJECTID ;
    VOID            shift and go to state 48
    OBJECTID        shift and go to state 49


state 40

    (9) clase -> CLASS TYPEID : TYPEID { metodos . }
    (30) metodos -> metodos . metodo
    (21) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (25) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 50
    MODIFIER        shift and go to state 32

    metodo                         shift and go to state 31

state 41

    (11) clase -> CLASS TYPEID : TYPEID { atributos . }
    (13) clase -> CLASS TYPEID : TYPEID { atributos . metodos }
    (20) atributos -> atributos . atributo
    (29) metodos -> . metodo
    (30) metodos -> . metodos metodo
    (17) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (18) atributo -> . MODIFIER TYPEID OBJECTID ;
    (21) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (25) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 51
    MODIFIER        shift and go to state 36

    metodos                        shift and go to state 52
    atributo                       shift and go to state 35
    metodo                         shift and go to state 26

state 42

    (22) metodo -> MODIFIER TYPEID . VOID ( formales ) { expr }
    (26) metodo -> MODIFIER TYPEID . OBJECTID ( formales ) { expr }
    (28) metodo -> MODIFIER TYPEID . OBJECTID ( ) { expr }
    VOID            shift and go to state 48
    OBJECTID        shift and go to state 53


state 43

    (14) clase -> CLASS TYPEID { atributos metodos } .
    }               reduce using rule 14 (clase -> CLASS TYPEID { atributos metodos } .)
    CLASS           reduce using rule 14 (clase -> CLASS TYPEID { atributos metodos } .)


state 44

    (17) atributo -> MODIFIER TYPEID . OBJECTID ASSIGN expr ;
    (18) atributo -> MODIFIER TYPEID . OBJECTID ;
    (22) metodo -> MODIFIER TYPEID . VOID ( formales ) { expr }
    (26) metodo -> MODIFIER TYPEID . OBJECTID ( formales ) { expr }
    (28) metodo -> MODIFIER TYPEID . OBJECTID ( ) { expr }
    OBJECTID        shift and go to state 54
    VOID            shift and go to state 48


state 45

    (21) metodo -> MODIFIER STATIC VOID . OBJECTID ( formales ) { expr }
    (23) metodo -> MODIFIER STATIC VOID . OBJECTID ( ) { expr }
    OBJECTID        shift and go to state 55


state 46

    (25) metodo -> MODIFIER STATIC TYPEID . OBJECTID ( formales ) { expr }
    (27) metodo -> MODIFIER STATIC TYPEID . OBJECTID ( ) { expr }
    OBJECTID        shift and go to state 56


state 47

    (24) metodo -> MODIFIER VOID OBJECTID . ( ) { expr }
    (               shift and go to state 57


state 48

    (22) metodo -> MODIFIER TYPEID VOID . ( formales ) { expr }
    (               shift and go to state 58


state 49

    (26) metodo -> MODIFIER TYPEID OBJECTID . ( formales ) { expr }
    (28) metodo -> MODIFIER TYPEID OBJECTID . ( ) { expr }
    (17) atributo -> MODIFIER TYPEID OBJECTID . ASSIGN expr ;
    (18) atributo -> MODIFIER TYPEID OBJECTID . ;
    (               shift and go to state 59
    ASSIGN          shift and go to state 60
    ;               shift and go to state 61


state 50

    (9) clase -> CLASS TYPEID : TYPEID { metodos } .
    }               reduce using rule 9 (clase -> CLASS TYPEID : TYPEID { metodos } .)
    CLASS           reduce using rule 9 (clase -> CLASS TYPEID : TYPEID { metodos } .)


state 51

    (11) clase -> CLASS TYPEID : TYPEID { atributos } .
    }               reduce using rule 11 (clase -> CLASS TYPEID : TYPEID { atributos } .)
    CLASS           reduce using rule 11 (clase -> CLASS TYPEID : TYPEID { atributos } .)


state 52

    (13) clase -> CLASS TYPEID : TYPEID { atributos metodos . }
    (30) metodos -> metodos . metodo
    (21) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (22) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (24) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (25) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (26) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 62
    MODIFIER        shift and go to state 32

    metodo                         shift and go to state 31

state 53

    (26) metodo -> MODIFIER TYPEID OBJECTID . ( formales ) { expr }
    (28) metodo -> MODIFIER TYPEID OBJECTID . ( ) { expr }
    (               shift and go to state 59


state 54

    (17) atributo -> MODIFIER TYPEID OBJECTID . ASSIGN expr ;
    (18) atributo -> MODIFIER TYPEID OBJECTID . ;
    (26) metodo -> MODIFIER TYPEID OBJECTID . ( formales ) { expr }
    (28) metodo -> MODIFIER TYPEID OBJECTID . ( ) { expr }
    ASSIGN          shift and go to state 60
    ;               shift and go to state 61
    (               shift and go to state 59


state 55

    (21) metodo -> MODIFIER STATIC VOID OBJECTID . ( formales ) { expr }
    (23) metodo -> MODIFIER STATIC VOID OBJECTID . ( ) { expr }
    (               shift and go to state 63


state 56

    (25) metodo -> MODIFIER STATIC TYPEID OBJECTID . ( formales ) { expr }
    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID . ( ) { expr }
    (               shift and go to state 64


state 57

    (24) metodo -> MODIFIER VOID OBJECTID ( . ) { expr }
    )               shift and go to state 65


state 58

    (22) metodo -> MODIFIER TYPEID VOID ( . formales ) { expr }
    (32) formales -> . formal
    (33) formales -> . formales , formal
    (31) formal -> . TYPEID OBJECTID
    TYPEID          shift and go to state 66

    formales                       shift and go to state 67
    formal                         shift and go to state 68

state 59

    (26) metodo -> MODIFIER TYPEID OBJECTID ( . formales ) { expr }
    (28) metodo -> MODIFIER TYPEID OBJECTID ( . ) { expr }
    (32) formales -> . formal
    (33) formales -> . formales , formal
    (31) formal -> . TYPEID OBJECTID
    )               shift and go to state 70
    TYPEID          shift and go to state 66

    formales                       shift and go to state 69
    formal                         shift and go to state 68

state 60

    (17) atributo -> MODIFIER TYPEID OBJECTID ASSIGN . expr ;
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 73
    exprApoyo2                     shift and go to state 74

state 61

    (18) atributo -> MODIFIER TYPEID OBJECTID ; .
    }               reduce using rule 18 (atributo -> MODIFIER TYPEID OBJECTID ; .)
    MODIFIER        reduce using rule 18 (atributo -> MODIFIER TYPEID OBJECTID ; .)


state 62

    (13) clase -> CLASS TYPEID : TYPEID { atributos metodos } .
    }               reduce using rule 13 (clase -> CLASS TYPEID : TYPEID { atributos metodos } .)
    CLASS           reduce using rule 13 (clase -> CLASS TYPEID : TYPEID { atributos metodos } .)


state 63

    (21) metodo -> MODIFIER STATIC VOID OBJECTID ( . formales ) { expr }
    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( . ) { expr }
    (32) formales -> . formal
    (33) formales -> . formales , formal
    (31) formal -> . TYPEID OBJECTID
    )               shift and go to state 89
    TYPEID          shift and go to state 66

    formales                       shift and go to state 88
    formal                         shift and go to state 68

state 64

    (25) metodo -> MODIFIER STATIC TYPEID OBJECTID ( . formales ) { expr }
    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( . ) { expr }
    (32) formales -> . formal
    (33) formales -> . formales , formal
    (31) formal -> . TYPEID OBJECTID
    )               shift and go to state 91
    TYPEID          shift and go to state 66

    formales                       shift and go to state 90
    formal                         shift and go to state 68

state 65

    (24) metodo -> MODIFIER VOID OBJECTID ( ) . { expr }
    {               shift and go to state 92


state 66

    (31) formal -> TYPEID . OBJECTID
    OBJECTID        shift and go to state 93


state 67

    (22) metodo -> MODIFIER TYPEID VOID ( formales . ) { expr }
    (33) formales -> formales . , formal
    )               shift and go to state 94
    ,               shift and go to state 95


state 68

    (32) formales -> formal .
    )               reduce using rule 32 (formales -> formal .)
    ,               reduce using rule 32 (formales -> formal .)


state 69

    (26) metodo -> MODIFIER TYPEID OBJECTID ( formales . ) { expr }
    (33) formales -> formales . , formal
    )               shift and go to state 96
    ,               shift and go to state 95


state 70

    (28) metodo -> MODIFIER TYPEID OBJECTID ( ) . { expr }
    {               shift and go to state 97


state 71

    (58) expr -> TYPEID . . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> TYPEID . . OBJECTID ( ) ;
    .               shift and go to state 98


state 72

    (39) expr -> OBJECTID .
    (61) expr -> OBJECTID . ( exprApoyo1 ) ;
    (63) expr -> OBJECTID . ( ) ;
    (64) expr -> OBJECTID . ASSIGN expr ;
    ;               reduce using rule 39 (expr -> OBJECTID .)
    OR              reduce using rule 39 (expr -> OBJECTID .)
    AND             reduce using rule 39 (expr -> OBJECTID .)
    LE              reduce using rule 39 (expr -> OBJECTID .)
    DIFFERENT       reduce using rule 39 (expr -> OBJECTID .)
    EQUALS          reduce using rule 39 (expr -> OBJECTID .)
    /               reduce using rule 39 (expr -> OBJECTID .)
    *               reduce using rule 39 (expr -> OBJECTID .)
    -               reduce using rule 39 (expr -> OBJECTID .)
    +               reduce using rule 39 (expr -> OBJECTID .)
    .               reduce using rule 39 (expr -> OBJECTID .)
    BOOL_CONST      reduce using rule 39 (expr -> OBJECTID .)
    STR_CONST       reduce using rule 39 (expr -> OBJECTID .)
    FLOAT_CONST     reduce using rule 39 (expr -> OBJECTID .)
    INT_CONST       reduce using rule 39 (expr -> OBJECTID .)
    OBJECTID        reduce using rule 39 (expr -> OBJECTID .)
    !               reduce using rule 39 (expr -> OBJECTID .)
    NEW             reduce using rule 39 (expr -> OBJECTID .)
    {               reduce using rule 39 (expr -> OBJECTID .)
    FUNCT           reduce using rule 39 (expr -> OBJECTID .)
    SWITCH          reduce using rule 39 (expr -> OBJECTID .)
    FOREACH         reduce using rule 39 (expr -> OBJECTID .)
    WHILE           reduce using rule 39 (expr -> OBJECTID .)
    IF              reduce using rule 39 (expr -> OBJECTID .)
    RETURN          reduce using rule 39 (expr -> OBJECTID .)
    TYPEID          reduce using rule 39 (expr -> OBJECTID .)
    }               reduce using rule 39 (expr -> OBJECTID .)
    )               reduce using rule 39 (expr -> OBJECTID .)
    ,               reduce using rule 39 (expr -> OBJECTID .)
    :               reduce using rule 39 (expr -> OBJECTID .)
    BREAK           reduce using rule 39 (expr -> OBJECTID .)
    (               shift and go to state 99
    ASSIGN          shift and go to state 100


state 73

    (17) atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr . ;
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               shift and go to state 102
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 74

    (34) expr -> exprApoyo2 .
    (75) exprApoyo2 -> exprApoyo2 . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
  ! shift/reduce conflict for BOOL_CONST resolved as shift
  ! shift/reduce conflict for STR_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for OBJECTID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for FUNCT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
    ;               reduce using rule 34 (expr -> exprApoyo2 .)
    OR              reduce using rule 34 (expr -> exprApoyo2 .)
    AND             reduce using rule 34 (expr -> exprApoyo2 .)
    LE              reduce using rule 34 (expr -> exprApoyo2 .)
    DIFFERENT       reduce using rule 34 (expr -> exprApoyo2 .)
    EQUALS          reduce using rule 34 (expr -> exprApoyo2 .)
    /               reduce using rule 34 (expr -> exprApoyo2 .)
    *               reduce using rule 34 (expr -> exprApoyo2 .)
    -               reduce using rule 34 (expr -> exprApoyo2 .)
    +               reduce using rule 34 (expr -> exprApoyo2 .)
    .               reduce using rule 34 (expr -> exprApoyo2 .)
    }               reduce using rule 34 (expr -> exprApoyo2 .)
    )               reduce using rule 34 (expr -> exprApoyo2 .)
    ,               reduce using rule 34 (expr -> exprApoyo2 .)
    :               reduce using rule 34 (expr -> exprApoyo2 .)
    BREAK           reduce using rule 34 (expr -> exprApoyo2 .)
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    exprApoyo2                     shift and go to state 74
    expr                           shift and go to state 113

state 75

    (35) expr -> BOOL_CONST .
    ;               reduce using rule 35 (expr -> BOOL_CONST .)
    OR              reduce using rule 35 (expr -> BOOL_CONST .)
    AND             reduce using rule 35 (expr -> BOOL_CONST .)
    LE              reduce using rule 35 (expr -> BOOL_CONST .)
    DIFFERENT       reduce using rule 35 (expr -> BOOL_CONST .)
    EQUALS          reduce using rule 35 (expr -> BOOL_CONST .)
    /               reduce using rule 35 (expr -> BOOL_CONST .)
    *               reduce using rule 35 (expr -> BOOL_CONST .)
    -               reduce using rule 35 (expr -> BOOL_CONST .)
    +               reduce using rule 35 (expr -> BOOL_CONST .)
    .               reduce using rule 35 (expr -> BOOL_CONST .)
    BOOL_CONST      reduce using rule 35 (expr -> BOOL_CONST .)
    STR_CONST       reduce using rule 35 (expr -> BOOL_CONST .)
    FLOAT_CONST     reduce using rule 35 (expr -> BOOL_CONST .)
    INT_CONST       reduce using rule 35 (expr -> BOOL_CONST .)
    OBJECTID        reduce using rule 35 (expr -> BOOL_CONST .)
    !               reduce using rule 35 (expr -> BOOL_CONST .)
    NEW             reduce using rule 35 (expr -> BOOL_CONST .)
    {               reduce using rule 35 (expr -> BOOL_CONST .)
    FUNCT           reduce using rule 35 (expr -> BOOL_CONST .)
    SWITCH          reduce using rule 35 (expr -> BOOL_CONST .)
    FOREACH         reduce using rule 35 (expr -> BOOL_CONST .)
    WHILE           reduce using rule 35 (expr -> BOOL_CONST .)
    IF              reduce using rule 35 (expr -> BOOL_CONST .)
    RETURN          reduce using rule 35 (expr -> BOOL_CONST .)
    TYPEID          reduce using rule 35 (expr -> BOOL_CONST .)
    }               reduce using rule 35 (expr -> BOOL_CONST .)
    )               reduce using rule 35 (expr -> BOOL_CONST .)
    ,               reduce using rule 35 (expr -> BOOL_CONST .)
    :               reduce using rule 35 (expr -> BOOL_CONST .)
    BREAK           reduce using rule 35 (expr -> BOOL_CONST .)


state 76

    (36) expr -> STR_CONST .
    ;               reduce using rule 36 (expr -> STR_CONST .)
    OR              reduce using rule 36 (expr -> STR_CONST .)
    AND             reduce using rule 36 (expr -> STR_CONST .)
    LE              reduce using rule 36 (expr -> STR_CONST .)
    DIFFERENT       reduce using rule 36 (expr -> STR_CONST .)
    EQUALS          reduce using rule 36 (expr -> STR_CONST .)
    /               reduce using rule 36 (expr -> STR_CONST .)
    *               reduce using rule 36 (expr -> STR_CONST .)
    -               reduce using rule 36 (expr -> STR_CONST .)
    +               reduce using rule 36 (expr -> STR_CONST .)
    .               reduce using rule 36 (expr -> STR_CONST .)
    BOOL_CONST      reduce using rule 36 (expr -> STR_CONST .)
    STR_CONST       reduce using rule 36 (expr -> STR_CONST .)
    FLOAT_CONST     reduce using rule 36 (expr -> STR_CONST .)
    INT_CONST       reduce using rule 36 (expr -> STR_CONST .)
    OBJECTID        reduce using rule 36 (expr -> STR_CONST .)
    !               reduce using rule 36 (expr -> STR_CONST .)
    NEW             reduce using rule 36 (expr -> STR_CONST .)
    {               reduce using rule 36 (expr -> STR_CONST .)
    FUNCT           reduce using rule 36 (expr -> STR_CONST .)
    SWITCH          reduce using rule 36 (expr -> STR_CONST .)
    FOREACH         reduce using rule 36 (expr -> STR_CONST .)
    WHILE           reduce using rule 36 (expr -> STR_CONST .)
    IF              reduce using rule 36 (expr -> STR_CONST .)
    RETURN          reduce using rule 36 (expr -> STR_CONST .)
    TYPEID          reduce using rule 36 (expr -> STR_CONST .)
    }               reduce using rule 36 (expr -> STR_CONST .)
    )               reduce using rule 36 (expr -> STR_CONST .)
    ,               reduce using rule 36 (expr -> STR_CONST .)
    :               reduce using rule 36 (expr -> STR_CONST .)
    BREAK           reduce using rule 36 (expr -> STR_CONST .)


state 77

    (37) expr -> FLOAT_CONST .
    ;               reduce using rule 37 (expr -> FLOAT_CONST .)
    OR              reduce using rule 37 (expr -> FLOAT_CONST .)
    AND             reduce using rule 37 (expr -> FLOAT_CONST .)
    LE              reduce using rule 37 (expr -> FLOAT_CONST .)
    DIFFERENT       reduce using rule 37 (expr -> FLOAT_CONST .)
    EQUALS          reduce using rule 37 (expr -> FLOAT_CONST .)
    /               reduce using rule 37 (expr -> FLOAT_CONST .)
    *               reduce using rule 37 (expr -> FLOAT_CONST .)
    -               reduce using rule 37 (expr -> FLOAT_CONST .)
    +               reduce using rule 37 (expr -> FLOAT_CONST .)
    .               reduce using rule 37 (expr -> FLOAT_CONST .)
    BOOL_CONST      reduce using rule 37 (expr -> FLOAT_CONST .)
    STR_CONST       reduce using rule 37 (expr -> FLOAT_CONST .)
    FLOAT_CONST     reduce using rule 37 (expr -> FLOAT_CONST .)
    INT_CONST       reduce using rule 37 (expr -> FLOAT_CONST .)
    OBJECTID        reduce using rule 37 (expr -> FLOAT_CONST .)
    !               reduce using rule 37 (expr -> FLOAT_CONST .)
    NEW             reduce using rule 37 (expr -> FLOAT_CONST .)
    {               reduce using rule 37 (expr -> FLOAT_CONST .)
    FUNCT           reduce using rule 37 (expr -> FLOAT_CONST .)
    SWITCH          reduce using rule 37 (expr -> FLOAT_CONST .)
    FOREACH         reduce using rule 37 (expr -> FLOAT_CONST .)
    WHILE           reduce using rule 37 (expr -> FLOAT_CONST .)
    IF              reduce using rule 37 (expr -> FLOAT_CONST .)
    RETURN          reduce using rule 37 (expr -> FLOAT_CONST .)
    TYPEID          reduce using rule 37 (expr -> FLOAT_CONST .)
    }               reduce using rule 37 (expr -> FLOAT_CONST .)
    )               reduce using rule 37 (expr -> FLOAT_CONST .)
    ,               reduce using rule 37 (expr -> FLOAT_CONST .)
    :               reduce using rule 37 (expr -> FLOAT_CONST .)
    BREAK           reduce using rule 37 (expr -> FLOAT_CONST .)


state 78

    (38) expr -> INT_CONST .
    ;               reduce using rule 38 (expr -> INT_CONST .)
    OR              reduce using rule 38 (expr -> INT_CONST .)
    AND             reduce using rule 38 (expr -> INT_CONST .)
    LE              reduce using rule 38 (expr -> INT_CONST .)
    DIFFERENT       reduce using rule 38 (expr -> INT_CONST .)
    EQUALS          reduce using rule 38 (expr -> INT_CONST .)
    /               reduce using rule 38 (expr -> INT_CONST .)
    *               reduce using rule 38 (expr -> INT_CONST .)
    -               reduce using rule 38 (expr -> INT_CONST .)
    +               reduce using rule 38 (expr -> INT_CONST .)
    .               reduce using rule 38 (expr -> INT_CONST .)
    BOOL_CONST      reduce using rule 38 (expr -> INT_CONST .)
    STR_CONST       reduce using rule 38 (expr -> INT_CONST .)
    FLOAT_CONST     reduce using rule 38 (expr -> INT_CONST .)
    INT_CONST       reduce using rule 38 (expr -> INT_CONST .)
    OBJECTID        reduce using rule 38 (expr -> INT_CONST .)
    !               reduce using rule 38 (expr -> INT_CONST .)
    NEW             reduce using rule 38 (expr -> INT_CONST .)
    {               reduce using rule 38 (expr -> INT_CONST .)
    FUNCT           reduce using rule 38 (expr -> INT_CONST .)
    SWITCH          reduce using rule 38 (expr -> INT_CONST .)
    FOREACH         reduce using rule 38 (expr -> INT_CONST .)
    WHILE           reduce using rule 38 (expr -> INT_CONST .)
    IF              reduce using rule 38 (expr -> INT_CONST .)
    RETURN          reduce using rule 38 (expr -> INT_CONST .)
    TYPEID          reduce using rule 38 (expr -> INT_CONST .)
    }               reduce using rule 38 (expr -> INT_CONST .)
    )               reduce using rule 38 (expr -> INT_CONST .)
    ,               reduce using rule 38 (expr -> INT_CONST .)
    :               reduce using rule 38 (expr -> INT_CONST .)
    BREAK           reduce using rule 38 (expr -> INT_CONST .)


state 79

    (45) expr -> ! . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 114
    exprApoyo2                     shift and go to state 74

state 80

    (50) expr -> NEW . OBJECTID
    OBJECTID        shift and go to state 115


state 81

    (51) expr -> { . exprApoyo3 } ;
    (69) exprApoyo3 -> . exprApoyo3 , FLOAT_CONST
    (70) exprApoyo3 -> . FLOAT_CONST , FLOAT_CONST
    (71) exprApoyo3 -> . exprApoyo3 , INT_CONST
    (72) exprApoyo3 -> . INT_CONST , INT_CONST
    (73) exprApoyo3 -> . exprApoyo3 , STR_CONST
    (74) exprApoyo3 -> . STR_CONST , STR_CONST
    FLOAT_CONST     shift and go to state 117
    INT_CONST       shift and go to state 118
    STR_CONST       shift and go to state 119

    exprApoyo3                     shift and go to state 116

state 82

    (52) expr -> FUNCT . < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    <               shift and go to state 120


state 83

    (53) expr -> SWITCH . ( expr ) { cases }
    (               shift and go to state 121


state 84

    (54) expr -> FOREACH . ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (               shift and go to state 122


state 85

    (55) expr -> WHILE . ( expr ) { expr }
    (               shift and go to state 123


state 86

    (56) expr -> IF . ( expr ) { expr } ELSE { expr }
    (               shift and go to state 124


state 87

    (57) expr -> RETURN . expr ;
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 125
    exprApoyo2                     shift and go to state 74

state 88

    (21) metodo -> MODIFIER STATIC VOID OBJECTID ( formales . ) { expr }
    (33) formales -> formales . , formal
    )               shift and go to state 126
    ,               shift and go to state 95


state 89

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( ) . { expr }
    {               shift and go to state 127


state 90

    (25) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales . ) { expr }
    (33) formales -> formales . , formal
    )               shift and go to state 128
    ,               shift and go to state 95


state 91

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) . { expr }
    {               shift and go to state 129


state 92

    (24) metodo -> MODIFIER VOID OBJECTID ( ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 130
    exprApoyo2                     shift and go to state 74

state 93

    (31) formal -> TYPEID OBJECTID .
    )               reduce using rule 31 (formal -> TYPEID OBJECTID .)
    ,               reduce using rule 31 (formal -> TYPEID OBJECTID .)


state 94

    (22) metodo -> MODIFIER TYPEID VOID ( formales ) . { expr }
    {               shift and go to state 131


state 95

    (33) formales -> formales , . formal
    (31) formal -> . TYPEID OBJECTID
    TYPEID          shift and go to state 66

    formal                         shift and go to state 132

state 96

    (26) metodo -> MODIFIER TYPEID OBJECTID ( formales ) . { expr }
    {               shift and go to state 133


state 97

    (28) metodo -> MODIFIER TYPEID OBJECTID ( ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 134
    exprApoyo2                     shift and go to state 74

state 98

    (58) expr -> TYPEID . . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> TYPEID . . OBJECTID ( ) ;
    OBJECTID        shift and go to state 135


state 99

    (61) expr -> OBJECTID ( . exprApoyo1 ) ;
    (63) expr -> OBJECTID ( . ) ;
    (77) exprApoyo1 -> . expr
    (78) exprApoyo1 -> . exprApoyo1 , expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    )               shift and go to state 137
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    exprApoyo1                     shift and go to state 136
    expr                           shift and go to state 138
    exprApoyo2                     shift and go to state 74

state 100

    (64) expr -> OBJECTID ASSIGN . expr ;
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 139
    exprApoyo2                     shift and go to state 74

state 101

    (76) exprApoyo2 -> expr expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for BOOL_CONST resolved as shift
  ! shift/reduce conflict for STR_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for OBJECTID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for FUNCT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
    ;               reduce using rule 76 (exprApoyo2 -> expr expr .)
    }               reduce using rule 76 (exprApoyo2 -> expr expr .)
    )               reduce using rule 76 (exprApoyo2 -> expr expr .)
    ,               reduce using rule 76 (exprApoyo2 -> expr expr .)
    :               reduce using rule 76 (exprApoyo2 -> expr expr .)
    BREAK           reduce using rule 76 (exprApoyo2 -> expr expr .)
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 102

    (17) atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr ; .
    }               reduce using rule 17 (atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr ; .)
    MODIFIER        reduce using rule 17 (atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr ; .)


state 103

    (40) expr -> expr OR . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 140
    exprApoyo2                     shift and go to state 74

state 104

    (41) expr -> expr AND . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 141
    exprApoyo2                     shift and go to state 74

state 105

    (42) expr -> expr LE . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 142
    exprApoyo2                     shift and go to state 74

state 106

    (43) expr -> expr DIFFERENT . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 143
    exprApoyo2                     shift and go to state 74

state 107

    (44) expr -> expr EQUALS . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 144
    exprApoyo2                     shift and go to state 74

state 108

    (46) expr -> expr / . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 145
    exprApoyo2                     shift and go to state 74

state 109

    (47) expr -> expr * . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 146
    exprApoyo2                     shift and go to state 74

state 110

    (48) expr -> expr - . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 147
    exprApoyo2                     shift and go to state 74

state 111

    (49) expr -> expr + . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 148
    exprApoyo2                     shift and go to state 74

state 112

    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    OBJECTID        shift and go to state 149


state 113

    (75) exprApoyo2 -> exprApoyo2 expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for BOOL_CONST resolved as shift
  ! shift/reduce conflict for STR_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for OBJECTID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for FUNCT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
    ;               reduce using rule 75 (exprApoyo2 -> exprApoyo2 expr .)
    }               reduce using rule 75 (exprApoyo2 -> exprApoyo2 expr .)
    )               reduce using rule 75 (exprApoyo2 -> exprApoyo2 expr .)
    ,               reduce using rule 75 (exprApoyo2 -> exprApoyo2 expr .)
    :               reduce using rule 75 (exprApoyo2 -> exprApoyo2 expr .)
    BREAK           reduce using rule 75 (exprApoyo2 -> exprApoyo2 expr .)
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    exprApoyo2                     shift and go to state 74
    expr                           shift and go to state 101

state 114

    (45) expr -> ! expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 45 (expr -> ! expr .)
    OR              reduce using rule 45 (expr -> ! expr .)
    AND             reduce using rule 45 (expr -> ! expr .)
    LE              reduce using rule 45 (expr -> ! expr .)
    DIFFERENT       reduce using rule 45 (expr -> ! expr .)
    EQUALS          reduce using rule 45 (expr -> ! expr .)
    /               reduce using rule 45 (expr -> ! expr .)
    *               reduce using rule 45 (expr -> ! expr .)
    -               reduce using rule 45 (expr -> ! expr .)
    +               reduce using rule 45 (expr -> ! expr .)
    BOOL_CONST      reduce using rule 45 (expr -> ! expr .)
    STR_CONST       reduce using rule 45 (expr -> ! expr .)
    FLOAT_CONST     reduce using rule 45 (expr -> ! expr .)
    INT_CONST       reduce using rule 45 (expr -> ! expr .)
    OBJECTID        reduce using rule 45 (expr -> ! expr .)
    NEW             reduce using rule 45 (expr -> ! expr .)
    {               reduce using rule 45 (expr -> ! expr .)
    FUNCT           reduce using rule 45 (expr -> ! expr .)
    SWITCH          reduce using rule 45 (expr -> ! expr .)
    FOREACH         reduce using rule 45 (expr -> ! expr .)
    WHILE           reduce using rule 45 (expr -> ! expr .)
    IF              reduce using rule 45 (expr -> ! expr .)
    RETURN          reduce using rule 45 (expr -> ! expr .)
    TYPEID          reduce using rule 45 (expr -> ! expr .)
    }               reduce using rule 45 (expr -> ! expr .)
    )               reduce using rule 45 (expr -> ! expr .)
    ,               reduce using rule 45 (expr -> ! expr .)
    :               reduce using rule 45 (expr -> ! expr .)
    BREAK           reduce using rule 45 (expr -> ! expr .)
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 115

    (50) expr -> NEW OBJECTID .
    ;               reduce using rule 50 (expr -> NEW OBJECTID .)
    OR              reduce using rule 50 (expr -> NEW OBJECTID .)
    AND             reduce using rule 50 (expr -> NEW OBJECTID .)
    LE              reduce using rule 50 (expr -> NEW OBJECTID .)
    DIFFERENT       reduce using rule 50 (expr -> NEW OBJECTID .)
    EQUALS          reduce using rule 50 (expr -> NEW OBJECTID .)
    /               reduce using rule 50 (expr -> NEW OBJECTID .)
    *               reduce using rule 50 (expr -> NEW OBJECTID .)
    -               reduce using rule 50 (expr -> NEW OBJECTID .)
    +               reduce using rule 50 (expr -> NEW OBJECTID .)
    .               reduce using rule 50 (expr -> NEW OBJECTID .)
    BOOL_CONST      reduce using rule 50 (expr -> NEW OBJECTID .)
    STR_CONST       reduce using rule 50 (expr -> NEW OBJECTID .)
    FLOAT_CONST     reduce using rule 50 (expr -> NEW OBJECTID .)
    INT_CONST       reduce using rule 50 (expr -> NEW OBJECTID .)
    OBJECTID        reduce using rule 50 (expr -> NEW OBJECTID .)
    !               reduce using rule 50 (expr -> NEW OBJECTID .)
    NEW             reduce using rule 50 (expr -> NEW OBJECTID .)
    {               reduce using rule 50 (expr -> NEW OBJECTID .)
    FUNCT           reduce using rule 50 (expr -> NEW OBJECTID .)
    SWITCH          reduce using rule 50 (expr -> NEW OBJECTID .)
    FOREACH         reduce using rule 50 (expr -> NEW OBJECTID .)
    WHILE           reduce using rule 50 (expr -> NEW OBJECTID .)
    IF              reduce using rule 50 (expr -> NEW OBJECTID .)
    RETURN          reduce using rule 50 (expr -> NEW OBJECTID .)
    TYPEID          reduce using rule 50 (expr -> NEW OBJECTID .)
    }               reduce using rule 50 (expr -> NEW OBJECTID .)
    )               reduce using rule 50 (expr -> NEW OBJECTID .)
    ,               reduce using rule 50 (expr -> NEW OBJECTID .)
    :               reduce using rule 50 (expr -> NEW OBJECTID .)
    BREAK           reduce using rule 50 (expr -> NEW OBJECTID .)


state 116

    (51) expr -> { exprApoyo3 . } ;
    (69) exprApoyo3 -> exprApoyo3 . , FLOAT_CONST
    (71) exprApoyo3 -> exprApoyo3 . , INT_CONST
    (73) exprApoyo3 -> exprApoyo3 . , STR_CONST
    }               shift and go to state 150
    ,               shift and go to state 151


state 117

    (70) exprApoyo3 -> FLOAT_CONST . , FLOAT_CONST
    ,               shift and go to state 152


state 118

    (72) exprApoyo3 -> INT_CONST . , INT_CONST
    ,               shift and go to state 153


state 119

    (74) exprApoyo3 -> STR_CONST . , STR_CONST
    ,               shift and go to state 154


state 120

    (52) expr -> FUNCT < . TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    TYPEID          shift and go to state 155


state 121

    (53) expr -> SWITCH ( . expr ) { cases }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 156
    exprApoyo2                     shift and go to state 74

state 122

    (54) expr -> FOREACH ( . TYPEID OBJECTID IN OBJECTID ) { expr }
    TYPEID          shift and go to state 157


state 123

    (55) expr -> WHILE ( . expr ) { expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 158
    exprApoyo2                     shift and go to state 74

state 124

    (56) expr -> IF ( . expr ) { expr } ELSE { expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 159
    exprApoyo2                     shift and go to state 74

state 125

    (57) expr -> RETURN expr . ;
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               shift and go to state 160
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 126

    (21) metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) . { expr }
    {               shift and go to state 161


state 127

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 162
    exprApoyo2                     shift and go to state 74

state 128

    (25) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) . { expr }
    {               shift and go to state 163


state 129

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 164
    exprApoyo2                     shift and go to state 74

state 130

    (24) metodo -> MODIFIER VOID OBJECTID ( ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 165
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 131

    (22) metodo -> MODIFIER TYPEID VOID ( formales ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 166
    exprApoyo2                     shift and go to state 74

state 132

    (33) formales -> formales , formal .
    )               reduce using rule 33 (formales -> formales , formal .)
    ,               reduce using rule 33 (formales -> formales , formal .)


state 133

    (26) metodo -> MODIFIER TYPEID OBJECTID ( formales ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 167
    exprApoyo2                     shift and go to state 74

state 134

    (28) metodo -> MODIFIER TYPEID OBJECTID ( ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 168
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 135

    (58) expr -> TYPEID . OBJECTID . ( exprApoyo1 ) ;
    (59) expr -> TYPEID . OBJECTID . ( ) ;
    (               shift and go to state 169


state 136

    (61) expr -> OBJECTID ( exprApoyo1 . ) ;
    (78) exprApoyo1 -> exprApoyo1 . , expr
    )               shift and go to state 170
    ,               shift and go to state 171


state 137

    (63) expr -> OBJECTID ( ) . ;
    ;               shift and go to state 172


state 138

    (77) exprApoyo1 -> expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    )               reduce using rule 77 (exprApoyo1 -> expr .)
    ,               reduce using rule 77 (exprApoyo1 -> expr .)
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 139

    (64) expr -> OBJECTID ASSIGN expr . ;
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               shift and go to state 173
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 140

    (40) expr -> expr OR expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 40 (expr -> expr OR expr .)
    OR              reduce using rule 40 (expr -> expr OR expr .)
    BOOL_CONST      reduce using rule 40 (expr -> expr OR expr .)
    STR_CONST       reduce using rule 40 (expr -> expr OR expr .)
    FLOAT_CONST     reduce using rule 40 (expr -> expr OR expr .)
    INT_CONST       reduce using rule 40 (expr -> expr OR expr .)
    OBJECTID        reduce using rule 40 (expr -> expr OR expr .)
    NEW             reduce using rule 40 (expr -> expr OR expr .)
    {               reduce using rule 40 (expr -> expr OR expr .)
    FUNCT           reduce using rule 40 (expr -> expr OR expr .)
    SWITCH          reduce using rule 40 (expr -> expr OR expr .)
    FOREACH         reduce using rule 40 (expr -> expr OR expr .)
    WHILE           reduce using rule 40 (expr -> expr OR expr .)
    IF              reduce using rule 40 (expr -> expr OR expr .)
    RETURN          reduce using rule 40 (expr -> expr OR expr .)
    TYPEID          reduce using rule 40 (expr -> expr OR expr .)
    }               reduce using rule 40 (expr -> expr OR expr .)
    )               reduce using rule 40 (expr -> expr OR expr .)
    ,               reduce using rule 40 (expr -> expr OR expr .)
    :               reduce using rule 40 (expr -> expr OR expr .)
    BREAK           reduce using rule 40 (expr -> expr OR expr .)
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 141

    (41) expr -> expr AND expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 41 (expr -> expr AND expr .)
    OR              reduce using rule 41 (expr -> expr AND expr .)
    AND             reduce using rule 41 (expr -> expr AND expr .)
    BOOL_CONST      reduce using rule 41 (expr -> expr AND expr .)
    STR_CONST       reduce using rule 41 (expr -> expr AND expr .)
    FLOAT_CONST     reduce using rule 41 (expr -> expr AND expr .)
    INT_CONST       reduce using rule 41 (expr -> expr AND expr .)
    OBJECTID        reduce using rule 41 (expr -> expr AND expr .)
    NEW             reduce using rule 41 (expr -> expr AND expr .)
    {               reduce using rule 41 (expr -> expr AND expr .)
    FUNCT           reduce using rule 41 (expr -> expr AND expr .)
    SWITCH          reduce using rule 41 (expr -> expr AND expr .)
    FOREACH         reduce using rule 41 (expr -> expr AND expr .)
    WHILE           reduce using rule 41 (expr -> expr AND expr .)
    IF              reduce using rule 41 (expr -> expr AND expr .)
    RETURN          reduce using rule 41 (expr -> expr AND expr .)
    TYPEID          reduce using rule 41 (expr -> expr AND expr .)
    }               reduce using rule 41 (expr -> expr AND expr .)
    )               reduce using rule 41 (expr -> expr AND expr .)
    ,               reduce using rule 41 (expr -> expr AND expr .)
    :               reduce using rule 41 (expr -> expr AND expr .)
    BREAK           reduce using rule 41 (expr -> expr AND expr .)
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 142

    (42) expr -> expr LE expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 42 (expr -> expr LE expr .)
    OR              reduce using rule 42 (expr -> expr LE expr .)
    AND             reduce using rule 42 (expr -> expr LE expr .)
    LE              reduce using rule 42 (expr -> expr LE expr .)
    DIFFERENT       reduce using rule 42 (expr -> expr LE expr .)
    EQUALS          reduce using rule 42 (expr -> expr LE expr .)
    BOOL_CONST      reduce using rule 42 (expr -> expr LE expr .)
    STR_CONST       reduce using rule 42 (expr -> expr LE expr .)
    FLOAT_CONST     reduce using rule 42 (expr -> expr LE expr .)
    INT_CONST       reduce using rule 42 (expr -> expr LE expr .)
    OBJECTID        reduce using rule 42 (expr -> expr LE expr .)
    NEW             reduce using rule 42 (expr -> expr LE expr .)
    {               reduce using rule 42 (expr -> expr LE expr .)
    FUNCT           reduce using rule 42 (expr -> expr LE expr .)
    SWITCH          reduce using rule 42 (expr -> expr LE expr .)
    FOREACH         reduce using rule 42 (expr -> expr LE expr .)
    WHILE           reduce using rule 42 (expr -> expr LE expr .)
    IF              reduce using rule 42 (expr -> expr LE expr .)
    RETURN          reduce using rule 42 (expr -> expr LE expr .)
    TYPEID          reduce using rule 42 (expr -> expr LE expr .)
    }               reduce using rule 42 (expr -> expr LE expr .)
    )               reduce using rule 42 (expr -> expr LE expr .)
    ,               reduce using rule 42 (expr -> expr LE expr .)
    :               reduce using rule 42 (expr -> expr LE expr .)
    BREAK           reduce using rule 42 (expr -> expr LE expr .)
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 143

    (43) expr -> expr DIFFERENT expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 43 (expr -> expr DIFFERENT expr .)
    OR              reduce using rule 43 (expr -> expr DIFFERENT expr .)
    AND             reduce using rule 43 (expr -> expr DIFFERENT expr .)
    DIFFERENT       reduce using rule 43 (expr -> expr DIFFERENT expr .)
    EQUALS          reduce using rule 43 (expr -> expr DIFFERENT expr .)
    BOOL_CONST      reduce using rule 43 (expr -> expr DIFFERENT expr .)
    STR_CONST       reduce using rule 43 (expr -> expr DIFFERENT expr .)
    FLOAT_CONST     reduce using rule 43 (expr -> expr DIFFERENT expr .)
    INT_CONST       reduce using rule 43 (expr -> expr DIFFERENT expr .)
    OBJECTID        reduce using rule 43 (expr -> expr DIFFERENT expr .)
    NEW             reduce using rule 43 (expr -> expr DIFFERENT expr .)
    {               reduce using rule 43 (expr -> expr DIFFERENT expr .)
    FUNCT           reduce using rule 43 (expr -> expr DIFFERENT expr .)
    SWITCH          reduce using rule 43 (expr -> expr DIFFERENT expr .)
    FOREACH         reduce using rule 43 (expr -> expr DIFFERENT expr .)
    WHILE           reduce using rule 43 (expr -> expr DIFFERENT expr .)
    IF              reduce using rule 43 (expr -> expr DIFFERENT expr .)
    RETURN          reduce using rule 43 (expr -> expr DIFFERENT expr .)
    TYPEID          reduce using rule 43 (expr -> expr DIFFERENT expr .)
    }               reduce using rule 43 (expr -> expr DIFFERENT expr .)
    )               reduce using rule 43 (expr -> expr DIFFERENT expr .)
    ,               reduce using rule 43 (expr -> expr DIFFERENT expr .)
    :               reduce using rule 43 (expr -> expr DIFFERENT expr .)
    BREAK           reduce using rule 43 (expr -> expr DIFFERENT expr .)
    LE              shift and go to state 105
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 144

    (44) expr -> expr EQUALS expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 44 (expr -> expr EQUALS expr .)
    OR              reduce using rule 44 (expr -> expr EQUALS expr .)
    AND             reduce using rule 44 (expr -> expr EQUALS expr .)
    DIFFERENT       reduce using rule 44 (expr -> expr EQUALS expr .)
    EQUALS          reduce using rule 44 (expr -> expr EQUALS expr .)
    BOOL_CONST      reduce using rule 44 (expr -> expr EQUALS expr .)
    STR_CONST       reduce using rule 44 (expr -> expr EQUALS expr .)
    FLOAT_CONST     reduce using rule 44 (expr -> expr EQUALS expr .)
    INT_CONST       reduce using rule 44 (expr -> expr EQUALS expr .)
    OBJECTID        reduce using rule 44 (expr -> expr EQUALS expr .)
    NEW             reduce using rule 44 (expr -> expr EQUALS expr .)
    {               reduce using rule 44 (expr -> expr EQUALS expr .)
    FUNCT           reduce using rule 44 (expr -> expr EQUALS expr .)
    SWITCH          reduce using rule 44 (expr -> expr EQUALS expr .)
    FOREACH         reduce using rule 44 (expr -> expr EQUALS expr .)
    WHILE           reduce using rule 44 (expr -> expr EQUALS expr .)
    IF              reduce using rule 44 (expr -> expr EQUALS expr .)
    RETURN          reduce using rule 44 (expr -> expr EQUALS expr .)
    TYPEID          reduce using rule 44 (expr -> expr EQUALS expr .)
    }               reduce using rule 44 (expr -> expr EQUALS expr .)
    )               reduce using rule 44 (expr -> expr EQUALS expr .)
    ,               reduce using rule 44 (expr -> expr EQUALS expr .)
    :               reduce using rule 44 (expr -> expr EQUALS expr .)
    BREAK           reduce using rule 44 (expr -> expr EQUALS expr .)
    LE              shift and go to state 105
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 145

    (46) expr -> expr / expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 46 (expr -> expr / expr .)
    OR              reduce using rule 46 (expr -> expr / expr .)
    AND             reduce using rule 46 (expr -> expr / expr .)
    LE              reduce using rule 46 (expr -> expr / expr .)
    DIFFERENT       reduce using rule 46 (expr -> expr / expr .)
    EQUALS          reduce using rule 46 (expr -> expr / expr .)
    /               reduce using rule 46 (expr -> expr / expr .)
    *               reduce using rule 46 (expr -> expr / expr .)
    -               reduce using rule 46 (expr -> expr / expr .)
    +               reduce using rule 46 (expr -> expr / expr .)
    BOOL_CONST      reduce using rule 46 (expr -> expr / expr .)
    STR_CONST       reduce using rule 46 (expr -> expr / expr .)
    FLOAT_CONST     reduce using rule 46 (expr -> expr / expr .)
    INT_CONST       reduce using rule 46 (expr -> expr / expr .)
    OBJECTID        reduce using rule 46 (expr -> expr / expr .)
    NEW             reduce using rule 46 (expr -> expr / expr .)
    {               reduce using rule 46 (expr -> expr / expr .)
    FUNCT           reduce using rule 46 (expr -> expr / expr .)
    SWITCH          reduce using rule 46 (expr -> expr / expr .)
    FOREACH         reduce using rule 46 (expr -> expr / expr .)
    WHILE           reduce using rule 46 (expr -> expr / expr .)
    IF              reduce using rule 46 (expr -> expr / expr .)
    RETURN          reduce using rule 46 (expr -> expr / expr .)
    TYPEID          reduce using rule 46 (expr -> expr / expr .)
    }               reduce using rule 46 (expr -> expr / expr .)
    )               reduce using rule 46 (expr -> expr / expr .)
    ,               reduce using rule 46 (expr -> expr / expr .)
    :               reduce using rule 46 (expr -> expr / expr .)
    BREAK           reduce using rule 46 (expr -> expr / expr .)
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 146

    (47) expr -> expr * expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 47 (expr -> expr * expr .)
    OR              reduce using rule 47 (expr -> expr * expr .)
    AND             reduce using rule 47 (expr -> expr * expr .)
    LE              reduce using rule 47 (expr -> expr * expr .)
    DIFFERENT       reduce using rule 47 (expr -> expr * expr .)
    EQUALS          reduce using rule 47 (expr -> expr * expr .)
    /               reduce using rule 47 (expr -> expr * expr .)
    *               reduce using rule 47 (expr -> expr * expr .)
    -               reduce using rule 47 (expr -> expr * expr .)
    +               reduce using rule 47 (expr -> expr * expr .)
    BOOL_CONST      reduce using rule 47 (expr -> expr * expr .)
    STR_CONST       reduce using rule 47 (expr -> expr * expr .)
    FLOAT_CONST     reduce using rule 47 (expr -> expr * expr .)
    INT_CONST       reduce using rule 47 (expr -> expr * expr .)
    OBJECTID        reduce using rule 47 (expr -> expr * expr .)
    NEW             reduce using rule 47 (expr -> expr * expr .)
    {               reduce using rule 47 (expr -> expr * expr .)
    FUNCT           reduce using rule 47 (expr -> expr * expr .)
    SWITCH          reduce using rule 47 (expr -> expr * expr .)
    FOREACH         reduce using rule 47 (expr -> expr * expr .)
    WHILE           reduce using rule 47 (expr -> expr * expr .)
    IF              reduce using rule 47 (expr -> expr * expr .)
    RETURN          reduce using rule 47 (expr -> expr * expr .)
    TYPEID          reduce using rule 47 (expr -> expr * expr .)
    }               reduce using rule 47 (expr -> expr * expr .)
    )               reduce using rule 47 (expr -> expr * expr .)
    ,               reduce using rule 47 (expr -> expr * expr .)
    :               reduce using rule 47 (expr -> expr * expr .)
    BREAK           reduce using rule 47 (expr -> expr * expr .)
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 147

    (48) expr -> expr - expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 48 (expr -> expr - expr .)
    OR              reduce using rule 48 (expr -> expr - expr .)
    AND             reduce using rule 48 (expr -> expr - expr .)
    LE              reduce using rule 48 (expr -> expr - expr .)
    DIFFERENT       reduce using rule 48 (expr -> expr - expr .)
    EQUALS          reduce using rule 48 (expr -> expr - expr .)
    -               reduce using rule 48 (expr -> expr - expr .)
    +               reduce using rule 48 (expr -> expr - expr .)
    BOOL_CONST      reduce using rule 48 (expr -> expr - expr .)
    STR_CONST       reduce using rule 48 (expr -> expr - expr .)
    FLOAT_CONST     reduce using rule 48 (expr -> expr - expr .)
    INT_CONST       reduce using rule 48 (expr -> expr - expr .)
    OBJECTID        reduce using rule 48 (expr -> expr - expr .)
    NEW             reduce using rule 48 (expr -> expr - expr .)
    {               reduce using rule 48 (expr -> expr - expr .)
    FUNCT           reduce using rule 48 (expr -> expr - expr .)
    SWITCH          reduce using rule 48 (expr -> expr - expr .)
    FOREACH         reduce using rule 48 (expr -> expr - expr .)
    WHILE           reduce using rule 48 (expr -> expr - expr .)
    IF              reduce using rule 48 (expr -> expr - expr .)
    RETURN          reduce using rule 48 (expr -> expr - expr .)
    TYPEID          reduce using rule 48 (expr -> expr - expr .)
    }               reduce using rule 48 (expr -> expr - expr .)
    )               reduce using rule 48 (expr -> expr - expr .)
    ,               reduce using rule 48 (expr -> expr - expr .)
    :               reduce using rule 48 (expr -> expr - expr .)
    BREAK           reduce using rule 48 (expr -> expr - expr .)
    /               shift and go to state 108
    *               shift and go to state 109
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 148

    (49) expr -> expr + expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               reduce using rule 49 (expr -> expr + expr .)
    OR              reduce using rule 49 (expr -> expr + expr .)
    AND             reduce using rule 49 (expr -> expr + expr .)
    LE              reduce using rule 49 (expr -> expr + expr .)
    DIFFERENT       reduce using rule 49 (expr -> expr + expr .)
    EQUALS          reduce using rule 49 (expr -> expr + expr .)
    -               reduce using rule 49 (expr -> expr + expr .)
    +               reduce using rule 49 (expr -> expr + expr .)
    BOOL_CONST      reduce using rule 49 (expr -> expr + expr .)
    STR_CONST       reduce using rule 49 (expr -> expr + expr .)
    FLOAT_CONST     reduce using rule 49 (expr -> expr + expr .)
    INT_CONST       reduce using rule 49 (expr -> expr + expr .)
    OBJECTID        reduce using rule 49 (expr -> expr + expr .)
    NEW             reduce using rule 49 (expr -> expr + expr .)
    {               reduce using rule 49 (expr -> expr + expr .)
    FUNCT           reduce using rule 49 (expr -> expr + expr .)
    SWITCH          reduce using rule 49 (expr -> expr + expr .)
    FOREACH         reduce using rule 49 (expr -> expr + expr .)
    WHILE           reduce using rule 49 (expr -> expr + expr .)
    IF              reduce using rule 49 (expr -> expr + expr .)
    RETURN          reduce using rule 49 (expr -> expr + expr .)
    TYPEID          reduce using rule 49 (expr -> expr + expr .)
    }               reduce using rule 49 (expr -> expr + expr .)
    )               reduce using rule 49 (expr -> expr + expr .)
    ,               reduce using rule 49 (expr -> expr + expr .)
    :               reduce using rule 49 (expr -> expr + expr .)
    BREAK           reduce using rule 49 (expr -> expr + expr .)
    /               shift and go to state 108
    *               shift and go to state 109
    .               shift and go to state 112
    !               shift and go to state 79

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 149

    (60) expr -> expr . OBJECTID . ( exprApoyo1 ) ;
    (62) expr -> expr . OBJECTID . ( ) ;
    (               shift and go to state 174


state 150

    (51) expr -> { exprApoyo3 } . ;
    ;               shift and go to state 175


state 151

    (69) exprApoyo3 -> exprApoyo3 , . FLOAT_CONST
    (71) exprApoyo3 -> exprApoyo3 , . INT_CONST
    (73) exprApoyo3 -> exprApoyo3 , . STR_CONST
    FLOAT_CONST     shift and go to state 176
    INT_CONST       shift and go to state 177
    STR_CONST       shift and go to state 178


state 152

    (70) exprApoyo3 -> FLOAT_CONST , . FLOAT_CONST
    FLOAT_CONST     shift and go to state 179


state 153

    (72) exprApoyo3 -> INT_CONST , . INT_CONST
    INT_CONST       shift and go to state 180


state 154

    (74) exprApoyo3 -> STR_CONST , . STR_CONST
    STR_CONST       shift and go to state 181


state 155

    (52) expr -> FUNCT < TYPEID . , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    ,               shift and go to state 182


state 156

    (53) expr -> SWITCH ( expr . ) { cases }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    )               shift and go to state 183
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 157

    (54) expr -> FOREACH ( TYPEID . OBJECTID IN OBJECTID ) { expr }
    OBJECTID        shift and go to state 184


state 158

    (55) expr -> WHILE ( expr . ) { expr }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    )               shift and go to state 185
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 159

    (56) expr -> IF ( expr . ) { expr } ELSE { expr }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    )               shift and go to state 186
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 160

    (57) expr -> RETURN expr ; .
    ;               reduce using rule 57 (expr -> RETURN expr ; .)
    OR              reduce using rule 57 (expr -> RETURN expr ; .)
    AND             reduce using rule 57 (expr -> RETURN expr ; .)
    LE              reduce using rule 57 (expr -> RETURN expr ; .)
    DIFFERENT       reduce using rule 57 (expr -> RETURN expr ; .)
    EQUALS          reduce using rule 57 (expr -> RETURN expr ; .)
    /               reduce using rule 57 (expr -> RETURN expr ; .)
    *               reduce using rule 57 (expr -> RETURN expr ; .)
    -               reduce using rule 57 (expr -> RETURN expr ; .)
    +               reduce using rule 57 (expr -> RETURN expr ; .)
    .               reduce using rule 57 (expr -> RETURN expr ; .)
    BOOL_CONST      reduce using rule 57 (expr -> RETURN expr ; .)
    STR_CONST       reduce using rule 57 (expr -> RETURN expr ; .)
    FLOAT_CONST     reduce using rule 57 (expr -> RETURN expr ; .)
    INT_CONST       reduce using rule 57 (expr -> RETURN expr ; .)
    OBJECTID        reduce using rule 57 (expr -> RETURN expr ; .)
    !               reduce using rule 57 (expr -> RETURN expr ; .)
    NEW             reduce using rule 57 (expr -> RETURN expr ; .)
    {               reduce using rule 57 (expr -> RETURN expr ; .)
    FUNCT           reduce using rule 57 (expr -> RETURN expr ; .)
    SWITCH          reduce using rule 57 (expr -> RETURN expr ; .)
    FOREACH         reduce using rule 57 (expr -> RETURN expr ; .)
    WHILE           reduce using rule 57 (expr -> RETURN expr ; .)
    IF              reduce using rule 57 (expr -> RETURN expr ; .)
    RETURN          reduce using rule 57 (expr -> RETURN expr ; .)
    TYPEID          reduce using rule 57 (expr -> RETURN expr ; .)
    }               reduce using rule 57 (expr -> RETURN expr ; .)
    )               reduce using rule 57 (expr -> RETURN expr ; .)
    ,               reduce using rule 57 (expr -> RETURN expr ; .)
    :               reduce using rule 57 (expr -> RETURN expr ; .)
    BREAK           reduce using rule 57 (expr -> RETURN expr ; .)


state 161

    (21) metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 187
    exprApoyo2                     shift and go to state 74

state 162

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 188
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 163

    (25) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 189
    exprApoyo2                     shift and go to state 74

state 164

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 190
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 165

    (24) metodo -> MODIFIER VOID OBJECTID ( ) { expr } .
    }               reduce using rule 24 (metodo -> MODIFIER VOID OBJECTID ( ) { expr } .)
    MODIFIER        reduce using rule 24 (metodo -> MODIFIER VOID OBJECTID ( ) { expr } .)


state 166

    (22) metodo -> MODIFIER TYPEID VOID ( formales ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 191
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 167

    (26) metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 192
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 168

    (28) metodo -> MODIFIER TYPEID OBJECTID ( ) { expr } .
    }               reduce using rule 28 (metodo -> MODIFIER TYPEID OBJECTID ( ) { expr } .)
    MODIFIER        reduce using rule 28 (metodo -> MODIFIER TYPEID OBJECTID ( ) { expr } .)


state 169

    (58) expr -> TYPEID . OBJECTID ( . exprApoyo1 ) ;
    (59) expr -> TYPEID . OBJECTID ( . ) ;
    (77) exprApoyo1 -> . expr
    (78) exprApoyo1 -> . exprApoyo1 , expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    )               shift and go to state 194
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    exprApoyo1                     shift and go to state 193
    expr                           shift and go to state 138
    exprApoyo2                     shift and go to state 74

state 170

    (61) expr -> OBJECTID ( exprApoyo1 ) . ;
    ;               shift and go to state 195


state 171

    (78) exprApoyo1 -> exprApoyo1 , . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 196
    exprApoyo2                     shift and go to state 74

state 172

    (63) expr -> OBJECTID ( ) ; .
    ;               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    OR              reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    AND             reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    LE              reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    DIFFERENT       reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    EQUALS          reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    /               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    *               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    -               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    +               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    .               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    BOOL_CONST      reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    STR_CONST       reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    FLOAT_CONST     reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    INT_CONST       reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    OBJECTID        reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    !               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    NEW             reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    {               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    FUNCT           reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    SWITCH          reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    FOREACH         reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    WHILE           reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    IF              reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    RETURN          reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    TYPEID          reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    }               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    )               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    ,               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    :               reduce using rule 63 (expr -> OBJECTID ( ) ; .)
    BREAK           reduce using rule 63 (expr -> OBJECTID ( ) ; .)


state 173

    (64) expr -> OBJECTID ASSIGN expr ; .
    ;               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    OR              reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    AND             reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    LE              reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    DIFFERENT       reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    EQUALS          reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    /               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    *               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    -               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    +               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    .               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    BOOL_CONST      reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    STR_CONST       reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    FLOAT_CONST     reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    INT_CONST       reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    OBJECTID        reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    !               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    NEW             reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    {               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    FUNCT           reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    SWITCH          reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    FOREACH         reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    WHILE           reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    IF              reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    RETURN          reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    TYPEID          reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    }               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    )               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    ,               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    :               reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)
    BREAK           reduce using rule 64 (expr -> OBJECTID ASSIGN expr ; .)


state 174

    (60) expr -> expr . OBJECTID ( . exprApoyo1 ) ;
    (62) expr -> expr . OBJECTID ( . ) ;
    (77) exprApoyo1 -> . expr
    (78) exprApoyo1 -> . exprApoyo1 , expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    )               shift and go to state 198
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 138
    exprApoyo1                     shift and go to state 197
    exprApoyo2                     shift and go to state 74

state 175

    (51) expr -> { exprApoyo3 } ; .
    ;               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    OR              reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    AND             reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    LE              reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    DIFFERENT       reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    EQUALS          reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    /               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    *               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    -               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    +               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    .               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    BOOL_CONST      reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    STR_CONST       reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    FLOAT_CONST     reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    INT_CONST       reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    OBJECTID        reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    !               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    NEW             reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    {               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    FUNCT           reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    SWITCH          reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    FOREACH         reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    WHILE           reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    IF              reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    RETURN          reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    TYPEID          reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    }               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    )               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    ,               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    :               reduce using rule 51 (expr -> { exprApoyo3 } ; .)
    BREAK           reduce using rule 51 (expr -> { exprApoyo3 } ; .)


state 176

    (69) exprApoyo3 -> exprApoyo3 , FLOAT_CONST .
    }               reduce using rule 69 (exprApoyo3 -> exprApoyo3 , FLOAT_CONST .)
    ,               reduce using rule 69 (exprApoyo3 -> exprApoyo3 , FLOAT_CONST .)


state 177

    (71) exprApoyo3 -> exprApoyo3 , INT_CONST .
    }               reduce using rule 71 (exprApoyo3 -> exprApoyo3 , INT_CONST .)
    ,               reduce using rule 71 (exprApoyo3 -> exprApoyo3 , INT_CONST .)


state 178

    (73) exprApoyo3 -> exprApoyo3 , STR_CONST .
    }               reduce using rule 73 (exprApoyo3 -> exprApoyo3 , STR_CONST .)
    ,               reduce using rule 73 (exprApoyo3 -> exprApoyo3 , STR_CONST .)


state 179

    (70) exprApoyo3 -> FLOAT_CONST , FLOAT_CONST .
    }               reduce using rule 70 (exprApoyo3 -> FLOAT_CONST , FLOAT_CONST .)
    ,               reduce using rule 70 (exprApoyo3 -> FLOAT_CONST , FLOAT_CONST .)


state 180

    (72) exprApoyo3 -> INT_CONST , INT_CONST .
    }               reduce using rule 72 (exprApoyo3 -> INT_CONST , INT_CONST .)
    ,               reduce using rule 72 (exprApoyo3 -> INT_CONST , INT_CONST .)


state 181

    (74) exprApoyo3 -> STR_CONST , STR_CONST .
    }               reduce using rule 74 (exprApoyo3 -> STR_CONST , STR_CONST .)
    ,               reduce using rule 74 (exprApoyo3 -> STR_CONST , STR_CONST .)


state 182

    (52) expr -> FUNCT < TYPEID , . TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    TYPEID          shift and go to state 199


state 183

    (53) expr -> SWITCH ( expr ) . { cases }
    {               shift and go to state 200


state 184

    (54) expr -> FOREACH ( TYPEID OBJECTID . IN OBJECTID ) { expr }
    IN              shift and go to state 201


state 185

    (55) expr -> WHILE ( expr ) . { expr }
    {               shift and go to state 202


state 186

    (56) expr -> IF ( expr ) . { expr } ELSE { expr }
    {               shift and go to state 203


state 187

    (21) metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 204
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 188

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr } .
    }               reduce using rule 23 (metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr } .)
    MODIFIER        reduce using rule 23 (metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr } .)


state 189

    (25) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 205
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 190

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr } .
    }               reduce using rule 27 (metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr } .)
    MODIFIER        reduce using rule 27 (metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr } .)


state 191

    (22) metodo -> MODIFIER TYPEID VOID ( formales ) { expr } .
    }               reduce using rule 22 (metodo -> MODIFIER TYPEID VOID ( formales ) { expr } .)
    MODIFIER        reduce using rule 22 (metodo -> MODIFIER TYPEID VOID ( formales ) { expr } .)


state 192

    (26) metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr } .
    }               reduce using rule 26 (metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr } .)
    MODIFIER        reduce using rule 26 (metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr } .)


state 193

    (58) expr -> TYPEID . OBJECTID ( exprApoyo1 . ) ;
    (78) exprApoyo1 -> exprApoyo1 . , expr
    )               shift and go to state 206
    ,               shift and go to state 171


state 194

    (59) expr -> TYPEID . OBJECTID ( ) . ;
    ;               shift and go to state 207


state 195

    (61) expr -> OBJECTID ( exprApoyo1 ) ; .
    ;               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    OR              reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    AND             reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    LE              reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    DIFFERENT       reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    EQUALS          reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    /               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    *               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    -               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    +               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    .               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    BOOL_CONST      reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    STR_CONST       reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    FLOAT_CONST     reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    INT_CONST       reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    OBJECTID        reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    !               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    NEW             reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    {               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    FUNCT           reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    SWITCH          reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    FOREACH         reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    WHILE           reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    IF              reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    RETURN          reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    TYPEID          reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    }               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    )               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    ,               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    :               reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    BREAK           reduce using rule 61 (expr -> OBJECTID ( exprApoyo1 ) ; .)


state 196

    (78) exprApoyo1 -> exprApoyo1 , expr .
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    )               reduce using rule 78 (exprApoyo1 -> exprApoyo1 , expr .)
    ,               reduce using rule 78 (exprApoyo1 -> exprApoyo1 , expr .)
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 197

    (60) expr -> expr . OBJECTID ( exprApoyo1 . ) ;
    (78) exprApoyo1 -> exprApoyo1 . , expr
    )               shift and go to state 208
    ,               shift and go to state 171


state 198

    (62) expr -> expr . OBJECTID ( ) . ;
    ;               shift and go to state 209


state 199

    (52) expr -> FUNCT < TYPEID , TYPEID . > OBJECTID ASSIGN OBJECTID ARROW expr ;
    >               shift and go to state 210


state 200

    (53) expr -> SWITCH ( expr ) { . cases }
    (67) cases -> . case
    (68) cases -> . cases case
    (65) case -> . DEFAULT : expr BREAK ;
    (66) case -> . CASE expr : expr BREAK ;
    DEFAULT         shift and go to state 213
    CASE            shift and go to state 214

    cases                          shift and go to state 211
    case                           shift and go to state 212

state 201

    (54) expr -> FOREACH ( TYPEID OBJECTID IN . OBJECTID ) { expr }
    OBJECTID        shift and go to state 215


state 202

    (55) expr -> WHILE ( expr ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 216
    exprApoyo2                     shift and go to state 74

state 203

    (56) expr -> IF ( expr ) { . expr } ELSE { expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 217
    exprApoyo2                     shift and go to state 74

state 204

    (21) metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr } .
    }               reduce using rule 21 (metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr } .)
    MODIFIER        reduce using rule 21 (metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr } .)


state 205

    (25) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr } .
    }               reduce using rule 25 (metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr } .)
    MODIFIER        reduce using rule 25 (metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr } .)


state 206

    (58) expr -> TYPEID . OBJECTID ( exprApoyo1 ) . ;
    ;               shift and go to state 218


state 207

    (59) expr -> TYPEID . OBJECTID ( ) ; .
    ;               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    OR              reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    AND             reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    LE              reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    DIFFERENT       reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    EQUALS          reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    /               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    *               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    -               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    +               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    .               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    BOOL_CONST      reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    STR_CONST       reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    FLOAT_CONST     reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    INT_CONST       reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    OBJECTID        reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    !               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    NEW             reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    {               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    FUNCT           reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    SWITCH          reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    FOREACH         reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    WHILE           reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    IF              reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    RETURN          reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    TYPEID          reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    }               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    )               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    ,               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    :               reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)
    BREAK           reduce using rule 59 (expr -> TYPEID . OBJECTID ( ) ; .)


state 208

    (60) expr -> expr . OBJECTID ( exprApoyo1 ) . ;
    ;               shift and go to state 219


state 209

    (62) expr -> expr . OBJECTID ( ) ; .
    ;               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    OR              reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    AND             reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    LE              reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    DIFFERENT       reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    EQUALS          reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    /               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    *               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    -               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    +               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    .               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    BOOL_CONST      reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    STR_CONST       reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    FLOAT_CONST     reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    INT_CONST       reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    OBJECTID        reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    !               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    NEW             reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    {               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    FUNCT           reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    SWITCH          reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    FOREACH         reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    WHILE           reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    IF              reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    RETURN          reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    TYPEID          reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    }               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    )               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    ,               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    :               reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)
    BREAK           reduce using rule 62 (expr -> expr . OBJECTID ( ) ; .)


state 210

    (52) expr -> FUNCT < TYPEID , TYPEID > . OBJECTID ASSIGN OBJECTID ARROW expr ;
    OBJECTID        shift and go to state 220


state 211

    (53) expr -> SWITCH ( expr ) { cases . }
    (68) cases -> cases . case
    (65) case -> . DEFAULT : expr BREAK ;
    (66) case -> . CASE expr : expr BREAK ;
    }               shift and go to state 221
    DEFAULT         shift and go to state 213
    CASE            shift and go to state 214

    case                           shift and go to state 222

state 212

    (67) cases -> case .
    }               reduce using rule 67 (cases -> case .)
    DEFAULT         reduce using rule 67 (cases -> case .)
    CASE            reduce using rule 67 (cases -> case .)


state 213

    (65) case -> DEFAULT . : expr BREAK ;
    :               shift and go to state 223


state 214

    (66) case -> CASE . expr : expr BREAK ;
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 224
    exprApoyo2                     shift and go to state 74

state 215

    (54) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID . ) { expr }
    )               shift and go to state 225


state 216

    (55) expr -> WHILE ( expr ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 226
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 217

    (56) expr -> IF ( expr ) { expr . } ELSE { expr }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 227
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 218

    (58) expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .
    ;               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    OR              reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    AND             reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    LE              reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    DIFFERENT       reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    EQUALS          reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    /               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    *               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    -               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    +               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    .               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    BOOL_CONST      reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    STR_CONST       reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    FLOAT_CONST     reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    INT_CONST       reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    OBJECTID        reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    !               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    NEW             reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    {               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    FUNCT           reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    SWITCH          reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    FOREACH         reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    WHILE           reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    IF              reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    RETURN          reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    TYPEID          reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    }               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    )               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    ,               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    :               reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    BREAK           reduce using rule 58 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)


state 219

    (60) expr -> expr . OBJECTID ( exprApoyo1 ) ; .
    ;               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    OR              reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    AND             reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    LE              reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    DIFFERENT       reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    EQUALS          reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    /               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    *               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    -               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    +               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    .               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    BOOL_CONST      reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    STR_CONST       reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    FLOAT_CONST     reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    INT_CONST       reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    OBJECTID        reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    !               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    NEW             reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    {               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    FUNCT           reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    SWITCH          reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    FOREACH         reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    WHILE           reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    IF              reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    RETURN          reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    TYPEID          reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    }               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    )               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    ,               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    :               reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    BREAK           reduce using rule 60 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)


state 220

    (52) expr -> FUNCT < TYPEID , TYPEID > OBJECTID . ASSIGN OBJECTID ARROW expr ;
    ASSIGN          shift and go to state 228


state 221

    (53) expr -> SWITCH ( expr ) { cases } .
    ;               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    OR              reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    AND             reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    LE              reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    DIFFERENT       reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    EQUALS          reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    /               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    *               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    -               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    +               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    .               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    BOOL_CONST      reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    STR_CONST       reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    FLOAT_CONST     reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    INT_CONST       reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    OBJECTID        reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    !               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    NEW             reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    {               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    FUNCT           reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    SWITCH          reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    FOREACH         reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    WHILE           reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    IF              reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    RETURN          reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    TYPEID          reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    }               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    )               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    ,               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    :               reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)
    BREAK           reduce using rule 53 (expr -> SWITCH ( expr ) { cases } .)


state 222

    (68) cases -> cases case .
    }               reduce using rule 68 (cases -> cases case .)
    DEFAULT         reduce using rule 68 (cases -> cases case .)
    CASE            reduce using rule 68 (cases -> cases case .)


state 223

    (65) case -> DEFAULT : . expr BREAK ;
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 229
    exprApoyo2                     shift and go to state 74

state 224

    (66) case -> CASE expr . : expr BREAK ;
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    :               shift and go to state 230
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 225

    (54) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) . { expr }
    {               shift and go to state 231


state 226

    (55) expr -> WHILE ( expr ) { expr } .
    ;               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    OR              reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    AND             reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    LE              reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    DIFFERENT       reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    EQUALS          reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    /               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    *               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    -               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    +               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    .               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    BOOL_CONST      reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    STR_CONST       reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    FLOAT_CONST     reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    INT_CONST       reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    OBJECTID        reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    !               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    NEW             reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    {               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    FUNCT           reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    SWITCH          reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    FOREACH         reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    WHILE           reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    IF              reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    RETURN          reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    TYPEID          reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    }               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    )               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    ,               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    :               reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)
    BREAK           reduce using rule 55 (expr -> WHILE ( expr ) { expr } .)


state 227

    (56) expr -> IF ( expr ) { expr } . ELSE { expr }
    ELSE            shift and go to state 232


state 228

    (52) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN . OBJECTID ARROW expr ;
    OBJECTID        shift and go to state 233


state 229

    (65) case -> DEFAULT : expr . BREAK ;
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BREAK           shift and go to state 234
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 230

    (66) case -> CASE expr : . expr BREAK ;
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 235
    exprApoyo2                     shift and go to state 74

state 231

    (54) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 236
    exprApoyo2                     shift and go to state 74

state 232

    (56) expr -> IF ( expr ) { expr } ELSE . { expr }
    {               shift and go to state 237


state 233

    (52) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID . ARROW expr ;
    ARROW           shift and go to state 238


state 234

    (65) case -> DEFAULT : expr BREAK . ;
    ;               shift and go to state 239


state 235

    (66) case -> CASE expr : expr . BREAK ;
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BREAK           shift and go to state 240
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 236

    (54) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 241
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 237

    (56) expr -> IF ( expr ) { expr } ELSE { . expr }
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 242
    exprApoyo2                     shift and go to state 74

state 238

    (52) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW . expr ;
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 243
    exprApoyo2                     shift and go to state 74

state 239

    (65) case -> DEFAULT : expr BREAK ; .
    }               reduce using rule 65 (case -> DEFAULT : expr BREAK ; .)
    DEFAULT         reduce using rule 65 (case -> DEFAULT : expr BREAK ; .)
    CASE            reduce using rule 65 (case -> DEFAULT : expr BREAK ; .)


state 240

    (66) case -> CASE expr : expr BREAK . ;
    ;               shift and go to state 244


state 241

    (54) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .
    ;               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    OR              reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    AND             reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    LE              reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    DIFFERENT       reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    EQUALS          reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    /               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    *               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    -               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    +               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    .               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    BOOL_CONST      reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    STR_CONST       reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    FLOAT_CONST     reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    INT_CONST       reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    OBJECTID        reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    !               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    NEW             reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    {               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    FUNCT           reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    SWITCH          reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    FOREACH         reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    WHILE           reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    IF              reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    RETURN          reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    TYPEID          reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    }               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    )               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    ,               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    :               reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    BREAK           reduce using rule 54 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)


state 242

    (56) expr -> IF ( expr ) { expr } ELSE { expr . }
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    }               shift and go to state 245
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 243

    (52) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr . ;
    (40) expr -> expr . OR expr
    (41) expr -> expr . AND expr
    (42) expr -> expr . LE expr
    (43) expr -> expr . DIFFERENT expr
    (44) expr -> expr . EQUALS expr
    (46) expr -> expr . / expr
    (47) expr -> expr . * expr
    (48) expr -> expr . - expr
    (49) expr -> expr . + expr
    (60) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> expr . . OBJECTID ( ) ;
    (76) exprApoyo2 -> expr . expr
    (34) expr -> . exprApoyo2
    (35) expr -> . BOOL_CONST
    (36) expr -> . STR_CONST
    (37) expr -> . FLOAT_CONST
    (38) expr -> . INT_CONST
    (39) expr -> . OBJECTID
    (40) expr -> . expr OR expr
    (41) expr -> . expr AND expr
    (42) expr -> . expr LE expr
    (43) expr -> . expr DIFFERENT expr
    (44) expr -> . expr EQUALS expr
    (45) expr -> . ! expr
    (46) expr -> . expr / expr
    (47) expr -> . expr * expr
    (48) expr -> . expr - expr
    (49) expr -> . expr + expr
    (50) expr -> . NEW OBJECTID
    (51) expr -> . { exprApoyo3 } ;
    (52) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (53) expr -> . SWITCH ( expr ) { cases }
    (54) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (55) expr -> . WHILE ( expr ) { expr }
    (56) expr -> . IF ( expr ) { expr } ELSE { expr }
    (57) expr -> . RETURN expr ;
    (58) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (59) expr -> . TYPEID . OBJECTID ( ) ;
    (60) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (61) expr -> . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . expr . OBJECTID ( ) ;
    (63) expr -> . OBJECTID ( ) ;
    (64) expr -> . OBJECTID ASSIGN expr ;
    (75) exprApoyo2 -> . exprApoyo2 expr
    (76) exprApoyo2 -> . expr expr
    ;               shift and go to state 246
    OR              shift and go to state 103
    AND             shift and go to state 104
    LE              shift and go to state 105
    DIFFERENT       shift and go to state 106
    EQUALS          shift and go to state 107
    /               shift and go to state 108
    *               shift and go to state 109
    -               shift and go to state 110
    +               shift and go to state 111
    .               shift and go to state 112
    BOOL_CONST      shift and go to state 75
    STR_CONST       shift and go to state 76
    FLOAT_CONST     shift and go to state 77
    INT_CONST       shift and go to state 78
    OBJECTID        shift and go to state 72
    !               shift and go to state 79
    NEW             shift and go to state 80
    {               shift and go to state 81
    FUNCT           shift and go to state 82
    SWITCH          shift and go to state 83
    FOREACH         shift and go to state 84
    WHILE           shift and go to state 85
    IF              shift and go to state 86
    RETURN          shift and go to state 87
    TYPEID          shift and go to state 71

    expr                           shift and go to state 101
    exprApoyo2                     shift and go to state 74

state 244

    (66) case -> CASE expr : expr BREAK ; .
    }               reduce using rule 66 (case -> CASE expr : expr BREAK ; .)
    DEFAULT         reduce using rule 66 (case -> CASE expr : expr BREAK ; .)
    CASE            reduce using rule 66 (case -> CASE expr : expr BREAK ; .)


state 245

    (56) expr -> IF ( expr ) { expr } ELSE { expr } .
    ;               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    OR              reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    AND             reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    LE              reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    DIFFERENT       reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    EQUALS          reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    /               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    *               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    -               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    +               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    .               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    BOOL_CONST      reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    STR_CONST       reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    FLOAT_CONST     reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    INT_CONST       reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    OBJECTID        reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    !               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    NEW             reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    {               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    FUNCT           reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    SWITCH          reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    FOREACH         reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    WHILE           reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    IF              reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    RETURN          reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    TYPEID          reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    }               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    )               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    ,               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    :               reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    BREAK           reduce using rule 56 (expr -> IF ( expr ) { expr } ELSE { expr } .)


state 246

    (52) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .
    ;               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    OR              reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    AND             reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    LE              reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    DIFFERENT       reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    EQUALS          reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    /               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    *               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    -               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    +               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    .               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    BOOL_CONST      reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    STR_CONST       reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    FLOAT_CONST     reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    INT_CONST       reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    OBJECTID        reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    !               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    NEW             reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    {               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    FUNCT           reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    SWITCH          reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    FOREACH         reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    WHILE           reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    IF              reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    RETURN          reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    TYPEID          reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    }               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    )               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    ,               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    :               reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    BREAK           reduce using rule 52 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)


Conflicts:

shift/reduce conflict for BOOL_CONST in state 74 resolved as shift
shift/reduce conflict for STR_CONST in state 74 resolved as shift
shift/reduce conflict for FLOAT_CONST in state 74 resolved as shift
shift/reduce conflict for INT_CONST in state 74 resolved as shift
shift/reduce conflict for OBJECTID in state 74 resolved as shift
shift/reduce conflict for ! in state 74 resolved as shift
shift/reduce conflict for NEW in state 74 resolved as shift
shift/reduce conflict for { in state 74 resolved as shift
shift/reduce conflict for FUNCT in state 74 resolved as shift
shift/reduce conflict for SWITCH in state 74 resolved as shift
shift/reduce conflict for FOREACH in state 74 resolved as shift
shift/reduce conflict for WHILE in state 74 resolved as shift
shift/reduce conflict for IF in state 74 resolved as shift
shift/reduce conflict for RETURN in state 74 resolved as shift
shift/reduce conflict for TYPEID in state 74 resolved as shift
shift/reduce conflict for OR in state 101 resolved as shift
shift/reduce conflict for AND in state 101 resolved as shift
shift/reduce conflict for LE in state 101 resolved as shift
shift/reduce conflict for DIFFERENT in state 101 resolved as shift
shift/reduce conflict for EQUALS in state 101 resolved as shift
shift/reduce conflict for / in state 101 resolved as shift
shift/reduce conflict for * in state 101 resolved as shift
shift/reduce conflict for - in state 101 resolved as shift
shift/reduce conflict for + in state 101 resolved as shift
shift/reduce conflict for . in state 101 resolved as shift
shift/reduce conflict for BOOL_CONST in state 101 resolved as shift
shift/reduce conflict for STR_CONST in state 101 resolved as shift
shift/reduce conflict for FLOAT_CONST in state 101 resolved as shift
shift/reduce conflict for INT_CONST in state 101 resolved as shift
shift/reduce conflict for OBJECTID in state 101 resolved as shift
shift/reduce conflict for ! in state 101 resolved as shift
shift/reduce conflict for NEW in state 101 resolved as shift
shift/reduce conflict for { in state 101 resolved as shift
shift/reduce conflict for FUNCT in state 101 resolved as shift
shift/reduce conflict for SWITCH in state 101 resolved as shift
shift/reduce conflict for FOREACH in state 101 resolved as shift
shift/reduce conflict for WHILE in state 101 resolved as shift
shift/reduce conflict for IF in state 101 resolved as shift
shift/reduce conflict for RETURN in state 101 resolved as shift
shift/reduce conflict for TYPEID in state 101 resolved as shift
shift/reduce conflict for OR in state 113 resolved as shift
shift/reduce conflict for AND in state 113 resolved as shift
shift/reduce conflict for LE in state 113 resolved as shift
shift/reduce conflict for DIFFERENT in state 113 resolved as shift
shift/reduce conflict for EQUALS in state 113 resolved as shift
shift/reduce conflict for / in state 113 resolved as shift
shift/reduce conflict for * in state 113 resolved as shift
shift/reduce conflict for - in state 113 resolved as shift
shift/reduce conflict for + in state 113 resolved as shift
shift/reduce conflict for . in state 113 resolved as shift
shift/reduce conflict for BOOL_CONST in state 113 resolved as shift
shift/reduce conflict for STR_CONST in state 113 resolved as shift
shift/reduce conflict for FLOAT_CONST in state 113 resolved as shift
shift/reduce conflict for INT_CONST in state 113 resolved as shift
shift/reduce conflict for OBJECTID in state 113 resolved as shift
shift/reduce conflict for ! in state 113 resolved as shift
shift/reduce conflict for NEW in state 113 resolved as shift
shift/reduce conflict for { in state 113 resolved as shift
shift/reduce conflict for FUNCT in state 113 resolved as shift
shift/reduce conflict for SWITCH in state 113 resolved as shift
shift/reduce conflict for FOREACH in state 113 resolved as shift
shift/reduce conflict for WHILE in state 113 resolved as shift
shift/reduce conflict for IF in state 113 resolved as shift
shift/reduce conflict for RETURN in state 113 resolved as shift
shift/reduce conflict for TYPEID in state 113 resolved as shift