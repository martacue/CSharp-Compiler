Grammar:

Rule 0     S' -> program
Rule 1     program -> using_directives namespace_declarations
Rule 2     program -> namespace_declarations
Rule 3     using_directive -> USING TYPEID
Rule 4     using_directives -> using_directive ;
Rule 5     using_directives -> using_directive using_directives
Rule 6     namespace_declaration -> NAMESPACE TYPEID { clases }
Rule 7     namespace_declarations -> namespace_declaration
Rule 8     namespace_declarations -> namespace_declarations namespace_declaration
Rule 9     clase -> CLASS TYPEID : TYPEID { metodos }
Rule 10    clase -> CLASS TYPEID { metodos }
Rule 11    clase -> CLASS TYPEID : error { atributos }
Rule 12    clase -> CLASS TYPEID : TYPEID { atributos }
Rule 13    clase -> CLASS TYPEID { atributos }
Rule 14    clase -> CLASS TYPEID : TYPEID { atributos metodos }
Rule 15    clase -> CLASS error { atributos metodos }
Rule 16    clase -> CLASS TYPEID { atributos metodos }
Rule 17    clases -> clase
Rule 18    clases -> clases clase
Rule 19    atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr ;
Rule 20    atributo -> MODIFIER TYPEID OBJECTID ;
Rule 21    atributos -> atributo
Rule 22    atributos -> atributos atributo
Rule 23    metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
Rule 24    metodo -> MODIFIER TYPEID VOID ( formales ) { expr }
Rule 25    metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr }
Rule 26    metodo -> MODIFIER VOID OBJECTID ( ) { expr }
Rule 27    metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
Rule 28    metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr }
Rule 29    metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
Rule 30    metodo -> MODIFIER TYPEID OBJECTID ( ) { expr }
Rule 31    metodos -> metodo
Rule 32    metodos -> metodos metodo
Rule 33    formal -> TYPEID OBJECTID
Rule 34    formales -> formal
Rule 35    formales -> formales error formal
Rule 36    formales -> formales , formal
Rule 37    expr -> exprApoyo2
Rule 38    expr -> BOOL_CONST
Rule 39    expr -> STR_CONST
Rule 40    expr -> FLOAT_CONST
Rule 41    expr -> INT_CONST
Rule 42    expr -> OBJECTID
Rule 43    expr -> expr OR expr  [precedence=left, level=1]
Rule 44    expr -> expr AND expr  [precedence=left, level=2]
Rule 45    expr -> expr LE expr  [precedence=nonassoc, level=4]
Rule 46    expr -> expr DIFFERENT expr  [precedence=left, level=3]
Rule 47    expr -> expr EQUALS expr  [precedence=left, level=3]
Rule 48    expr -> ! expr  [precedence=right, level=7]
Rule 49    expr -> expr / expr  [precedence=left, level=6]
Rule 50    expr -> expr * expr  [precedence=left, level=6]
Rule 51    expr -> expr - expr  [precedence=left, level=5]
Rule 52    expr -> expr + expr  [precedence=left, level=5]
Rule 53    expr -> NEW TYPEID ( )
Rule 54    expr -> { exprApoyo3 }
Rule 55    expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
Rule 56    expr -> SWITCH ( expr ) { cases }
Rule 57    expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
Rule 58    expr -> WHILE ( expr ) { expr }
Rule 59    expr -> IF ( expr ) { expr } ELSE { expr }
Rule 60    expr -> RETURN expr ;
Rule 61    expr -> TYPEID . OBJECTID ( exprApoyo1 ) ;
Rule 62    expr -> TYPEID . OBJECTID ( ) ;
Rule 63    expr -> expr . OBJECTID ( exprApoyo1 ) ;
Rule 64    expr -> OBJECTID ( exprApoyo1 )
Rule 65    expr -> OBJECTID ( exprApoyo1 ) ;
Rule 66    expr -> expr . OBJECTID ( ) ;
Rule 67    expr -> OBJECTID ( ) ;
Rule 68    expr -> TYPEID OBJECTID ASSIGN expr ;
Rule 69    expr -> OBJECTID ASSIGN expr ;
Rule 70    case -> DEFAULT : expr BREAK ;
Rule 71    case -> CASE expr : expr BREAK ;
Rule 72    cases -> case
Rule 73    cases -> cases case
Rule 74    exprApoyo3 -> exprApoyo3 , expr
Rule 75    exprApoyo3 -> expr , expr
Rule 76    exprApoyo2 -> exprApoyo2 expr
Rule 77    exprApoyo2 -> expr expr
Rule 78    exprApoyo1 -> expr
Rule 79    exprApoyo1 -> exprApoyo1 , expr

Terminals, with rules where they appear:

!                    : 48
(                    : 23 24 25 26 27 28 29 30 53 56 57 58 59 61 62 63 64 65 66 67
)                    : 23 24 25 26 27 28 29 30 53 56 57 58 59 61 62 63 64 65 66 67
*                    : 50
+                    : 52
,                    : 36 55 74 75 79
-                    : 51
.                    : 61 62 63 66
/                    : 49
:                    : 9 11 12 14 70 71
;                    : 4 19 20 55 60 61 62 63 65 66 67 68 69 70 71
<                    : 55
>                    : 55
AND                  : 44
ARROW                : 55
ASSIGN               : 19 55 68 69
BOOL_CONST           : 38
BREAK                : 70 71
CASE                 : 71
CLASS                : 9 10 11 12 13 14 15 16
DEFAULT              : 70
DIFFERENT            : 46
ELSE                 : 59
EQUALS               : 47
FLOAT_CONST          : 40
FOREACH              : 57
FUNCT                : 55
IF                   : 59
IN                   : 57
INT_CONST            : 41
LE                   : 45
MODIFIER             : 19 20 23 24 25 26 27 28 29 30
NAMESPACE            : 6
NEW                  : 53
OBJECTID             : 19 20 23 25 26 27 28 29 30 33 42 55 55 57 57 61 62 63 64 65 66 67 68 69
OR                   : 43
RETURN               : 60
STATIC               : 23 25 27 29
STR_CONST            : 39
SWITCH               : 56
TYPEID               : 3 6 9 9 10 11 12 12 13 14 14 16 19 20 24 27 28 29 30 33 53 55 55 57 61 62 68
USING                : 3
VOID                 : 23 24 25 26
WHILE                : 58
error                : 11 15 35
{                    : 6 9 10 11 12 13 14 15 16 23 24 25 26 27 28 29 30 54 56 57 58 59 59
}                    : 6 9 10 11 12 13 14 15 16 23 24 25 26 27 28 29 30 54 56 57 58 59 59

Nonterminals, with rules where they appear:

atributo             : 21 22
atributos            : 11 12 13 14 15 16 22
case                 : 72 73
cases                : 56 73
clase                : 17 18
clases               : 6 18
expr                 : 19 23 24 25 26 27 28 29 30 43 43 44 44 45 45 46 46 47 47 48 49 49 50 50 51 51 52 52 55 56 57 58 58 59 59 59 60 63 66 68 69 70 71 71 74 75 75 76 77 77 78 79
exprApoyo1           : 61 63 64 65 79
exprApoyo2           : 37 76
exprApoyo3           : 54 74
formal               : 34 35 36
formales             : 23 24 27 28 35 36
metodo               : 31 32
metodos              : 9 10 14 15 16 32
namespace_declaration : 7 8
namespace_declarations : 1 2 8
program              : 0
using_directive      : 4 5
using_directives     : 1 5


state 0

    (0) S' -> . program
    (1) program -> . using_directives namespace_declarations
    (2) program -> . namespace_declarations
    (4) using_directives -> . using_directive ;
    (5) using_directives -> . using_directive using_directives
    (7) namespace_declarations -> . namespace_declaration
    (8) namespace_declarations -> . namespace_declarations namespace_declaration
    (3) using_directive -> . USING TYPEID
    (6) namespace_declaration -> . NAMESPACE TYPEID { clases }
    USING           shift and go to state 6
    NAMESPACE       shift and go to state 7

    program                        shift and go to state 1
    using_directives               shift and go to state 2
    namespace_declarations         shift and go to state 3
    using_directive                shift and go to state 4
    namespace_declaration          shift and go to state 5

state 1

    (0) S' -> program .


state 2

    (1) program -> using_directives . namespace_declarations
    (7) namespace_declarations -> . namespace_declaration
    (8) namespace_declarations -> . namespace_declarations namespace_declaration
    (6) namespace_declaration -> . NAMESPACE TYPEID { clases }
    NAMESPACE       shift and go to state 7

    namespace_declarations         shift and go to state 8
    namespace_declaration          shift and go to state 5

state 3

    (2) program -> namespace_declarations .
    (8) namespace_declarations -> namespace_declarations . namespace_declaration
    (6) namespace_declaration -> . NAMESPACE TYPEID { clases }
    $end            reduce using rule 2 (program -> namespace_declarations .)
    NAMESPACE       shift and go to state 7

    namespace_declaration          shift and go to state 9

state 4

    (4) using_directives -> using_directive . ;
    (5) using_directives -> using_directive . using_directives
    (4) using_directives -> . using_directive ;
    (5) using_directives -> . using_directive using_directives
    (3) using_directive -> . USING TYPEID
    ;               shift and go to state 10
    USING           shift and go to state 6

    using_directive                shift and go to state 4
    using_directives               shift and go to state 11

state 5

    (7) namespace_declarations -> namespace_declaration .
    NAMESPACE       reduce using rule 7 (namespace_declarations -> namespace_declaration .)
    $end            reduce using rule 7 (namespace_declarations -> namespace_declaration .)


state 6

    (3) using_directive -> USING . TYPEID
    TYPEID          shift and go to state 12


state 7

    (6) namespace_declaration -> NAMESPACE . TYPEID { clases }
    TYPEID          shift and go to state 13


state 8

    (1) program -> using_directives namespace_declarations .
    (8) namespace_declarations -> namespace_declarations . namespace_declaration
    (6) namespace_declaration -> . NAMESPACE TYPEID { clases }
    $end            reduce using rule 1 (program -> using_directives namespace_declarations .)
    NAMESPACE       shift and go to state 7

    namespace_declaration          shift and go to state 9

state 9

    (8) namespace_declarations -> namespace_declarations namespace_declaration .
    NAMESPACE       reduce using rule 8 (namespace_declarations -> namespace_declarations namespace_declaration .)
    $end            reduce using rule 8 (namespace_declarations -> namespace_declarations namespace_declaration .)


state 10

    (4) using_directives -> using_directive ; .
    NAMESPACE       reduce using rule 4 (using_directives -> using_directive ; .)


state 11

    (5) using_directives -> using_directive using_directives .
    NAMESPACE       reduce using rule 5 (using_directives -> using_directive using_directives .)


state 12

    (3) using_directive -> USING TYPEID .
    ;               reduce using rule 3 (using_directive -> USING TYPEID .)
    USING           reduce using rule 3 (using_directive -> USING TYPEID .)


state 13

    (6) namespace_declaration -> NAMESPACE TYPEID . { clases }
    {               shift and go to state 14


state 14

    (6) namespace_declaration -> NAMESPACE TYPEID { . clases }
    (17) clases -> . clase
    (18) clases -> . clases clase
    (9) clase -> . CLASS TYPEID : TYPEID { metodos }
    (10) clase -> . CLASS TYPEID { metodos }
    (11) clase -> . CLASS TYPEID : error { atributos }
    (12) clase -> . CLASS TYPEID : TYPEID { atributos }
    (13) clase -> . CLASS TYPEID { atributos }
    (14) clase -> . CLASS TYPEID : TYPEID { atributos metodos }
    (15) clase -> . CLASS error { atributos metodos }
    (16) clase -> . CLASS TYPEID { atributos metodos }
    CLASS           shift and go to state 17

    clases                         shift and go to state 15
    clase                          shift and go to state 16

state 15

    (6) namespace_declaration -> NAMESPACE TYPEID { clases . }
    (18) clases -> clases . clase
    (9) clase -> . CLASS TYPEID : TYPEID { metodos }
    (10) clase -> . CLASS TYPEID { metodos }
    (11) clase -> . CLASS TYPEID : error { atributos }
    (12) clase -> . CLASS TYPEID : TYPEID { atributos }
    (13) clase -> . CLASS TYPEID { atributos }
    (14) clase -> . CLASS TYPEID : TYPEID { atributos metodos }
    (15) clase -> . CLASS error { atributos metodos }
    (16) clase -> . CLASS TYPEID { atributos metodos }
    }               shift and go to state 18
    CLASS           shift and go to state 17

    clase                          shift and go to state 19

state 16

    (17) clases -> clase .
    }               reduce using rule 17 (clases -> clase .)
    CLASS           reduce using rule 17 (clases -> clase .)


state 17

    (9) clase -> CLASS . TYPEID : TYPEID { metodos }
    (10) clase -> CLASS . TYPEID { metodos }
    (11) clase -> CLASS . TYPEID : error { atributos }
    (12) clase -> CLASS . TYPEID : TYPEID { atributos }
    (13) clase -> CLASS . TYPEID { atributos }
    (14) clase -> CLASS . TYPEID : TYPEID { atributos metodos }
    (15) clase -> CLASS . error { atributos metodos }
    (16) clase -> CLASS . TYPEID { atributos metodos }
    TYPEID          shift and go to state 20
    error           shift and go to state 21


state 18

    (6) namespace_declaration -> NAMESPACE TYPEID { clases } .
    NAMESPACE       reduce using rule 6 (namespace_declaration -> NAMESPACE TYPEID { clases } .)
    $end            reduce using rule 6 (namespace_declaration -> NAMESPACE TYPEID { clases } .)


state 19

    (18) clases -> clases clase .
    }               reduce using rule 18 (clases -> clases clase .)
    CLASS           reduce using rule 18 (clases -> clases clase .)


state 20

    (9) clase -> CLASS TYPEID . : TYPEID { metodos }
    (10) clase -> CLASS TYPEID . { metodos }
    (11) clase -> CLASS TYPEID . : error { atributos }
    (12) clase -> CLASS TYPEID . : TYPEID { atributos }
    (13) clase -> CLASS TYPEID . { atributos }
    (14) clase -> CLASS TYPEID . : TYPEID { atributos metodos }
    (16) clase -> CLASS TYPEID . { atributos metodos }
    :               shift and go to state 22
    {               shift and go to state 23


state 21

    (15) clase -> CLASS error . { atributos metodos }
    {               shift and go to state 24


state 22

    (9) clase -> CLASS TYPEID : . TYPEID { metodos }
    (11) clase -> CLASS TYPEID : . error { atributos }
    (12) clase -> CLASS TYPEID : . TYPEID { atributos }
    (14) clase -> CLASS TYPEID : . TYPEID { atributos metodos }
    TYPEID          shift and go to state 25
    error           shift and go to state 26


state 23

    (10) clase -> CLASS TYPEID { . metodos }
    (13) clase -> CLASS TYPEID { . atributos }
    (16) clase -> CLASS TYPEID { . atributos metodos }
    (31) metodos -> . metodo
    (32) metodos -> . metodos metodo
    (21) atributos -> . atributo
    (22) atributos -> . atributos atributo
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    (19) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> . MODIFIER TYPEID OBJECTID ;
    MODIFIER        shift and go to state 31

    metodos                        shift and go to state 27
    atributos                      shift and go to state 28
    metodo                         shift and go to state 29
    atributo                       shift and go to state 30

state 24

    (15) clase -> CLASS error { . atributos metodos }
    (21) atributos -> . atributo
    (22) atributos -> . atributos atributo
    (19) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> . MODIFIER TYPEID OBJECTID ;
    MODIFIER        shift and go to state 33

    atributos                      shift and go to state 32
    atributo                       shift and go to state 30

state 25

    (9) clase -> CLASS TYPEID : TYPEID . { metodos }
    (12) clase -> CLASS TYPEID : TYPEID . { atributos }
    (14) clase -> CLASS TYPEID : TYPEID . { atributos metodos }
    {               shift and go to state 34


state 26

    (11) clase -> CLASS TYPEID : error . { atributos }
    {               shift and go to state 35


state 27

    (10) clase -> CLASS TYPEID { metodos . }
    (32) metodos -> metodos . metodo
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 36
    MODIFIER        shift and go to state 38

    metodo                         shift and go to state 37

state 28

    (13) clase -> CLASS TYPEID { atributos . }
    (16) clase -> CLASS TYPEID { atributos . metodos }
    (22) atributos -> atributos . atributo
    (31) metodos -> . metodo
    (32) metodos -> . metodos metodo
    (19) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> . MODIFIER TYPEID OBJECTID ;
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 39
    MODIFIER        shift and go to state 42

    metodos                        shift and go to state 40
    atributo                       shift and go to state 41
    metodo                         shift and go to state 29

state 29

    (31) metodos -> metodo .
    }               reduce using rule 31 (metodos -> metodo .)
    MODIFIER        reduce using rule 31 (metodos -> metodo .)


state 30

    (21) atributos -> atributo .
    }               reduce using rule 21 (atributos -> atributo .)
    MODIFIER        reduce using rule 21 (atributos -> atributo .)


state 31

    (23) metodo -> MODIFIER . STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> MODIFIER . TYPEID VOID ( formales ) { expr }
    (25) metodo -> MODIFIER . STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> MODIFIER . VOID OBJECTID ( ) { expr }
    (27) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> MODIFIER . TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> MODIFIER . TYPEID OBJECTID ( ) { expr }
    (19) atributo -> MODIFIER . TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> MODIFIER . TYPEID OBJECTID ;
    STATIC          shift and go to state 43
    TYPEID          shift and go to state 45
    VOID            shift and go to state 44


state 32

    (15) clase -> CLASS error { atributos . metodos }
    (22) atributos -> atributos . atributo
    (31) metodos -> . metodo
    (32) metodos -> . metodos metodo
    (19) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> . MODIFIER TYPEID OBJECTID ;
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    MODIFIER        shift and go to state 42

    metodos                        shift and go to state 46
    atributo                       shift and go to state 41
    metodo                         shift and go to state 29

state 33

    (19) atributo -> MODIFIER . TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> MODIFIER . TYPEID OBJECTID ;
    TYPEID          shift and go to state 47


state 34

    (9) clase -> CLASS TYPEID : TYPEID { . metodos }
    (12) clase -> CLASS TYPEID : TYPEID { . atributos }
    (14) clase -> CLASS TYPEID : TYPEID { . atributos metodos }
    (31) metodos -> . metodo
    (32) metodos -> . metodos metodo
    (21) atributos -> . atributo
    (22) atributos -> . atributos atributo
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    (19) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> . MODIFIER TYPEID OBJECTID ;
    MODIFIER        shift and go to state 31

    metodos                        shift and go to state 48
    atributos                      shift and go to state 49
    metodo                         shift and go to state 29
    atributo                       shift and go to state 30

state 35

    (11) clase -> CLASS TYPEID : error { . atributos }
    (21) atributos -> . atributo
    (22) atributos -> . atributos atributo
    (19) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> . MODIFIER TYPEID OBJECTID ;
    MODIFIER        shift and go to state 33

    atributos                      shift and go to state 50
    atributo                       shift and go to state 30

state 36

    (10) clase -> CLASS TYPEID { metodos } .
    }               reduce using rule 10 (clase -> CLASS TYPEID { metodos } .)
    CLASS           reduce using rule 10 (clase -> CLASS TYPEID { metodos } .)


state 37

    (32) metodos -> metodos metodo .
    }               reduce using rule 32 (metodos -> metodos metodo .)
    MODIFIER        reduce using rule 32 (metodos -> metodos metodo .)


state 38

    (23) metodo -> MODIFIER . STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> MODIFIER . TYPEID VOID ( formales ) { expr }
    (25) metodo -> MODIFIER . STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> MODIFIER . VOID OBJECTID ( ) { expr }
    (27) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> MODIFIER . TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> MODIFIER . TYPEID OBJECTID ( ) { expr }
    STATIC          shift and go to state 43
    TYPEID          shift and go to state 51
    VOID            shift and go to state 44


state 39

    (13) clase -> CLASS TYPEID { atributos } .
    }               reduce using rule 13 (clase -> CLASS TYPEID { atributos } .)
    CLASS           reduce using rule 13 (clase -> CLASS TYPEID { atributos } .)


state 40

    (16) clase -> CLASS TYPEID { atributos metodos . }
    (32) metodos -> metodos . metodo
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 52
    MODIFIER        shift and go to state 38

    metodo                         shift and go to state 37

state 41

    (22) atributos -> atributos atributo .
    }               reduce using rule 22 (atributos -> atributos atributo .)
    MODIFIER        reduce using rule 22 (atributos -> atributos atributo .)


state 42

    (19) atributo -> MODIFIER . TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> MODIFIER . TYPEID OBJECTID ;
    (23) metodo -> MODIFIER . STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> MODIFIER . TYPEID VOID ( formales ) { expr }
    (25) metodo -> MODIFIER . STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> MODIFIER . VOID OBJECTID ( ) { expr }
    (27) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> MODIFIER . TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> MODIFIER . STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> MODIFIER . TYPEID OBJECTID ( ) { expr }
    TYPEID          shift and go to state 53
    STATIC          shift and go to state 43
    VOID            shift and go to state 44


state 43

    (23) metodo -> MODIFIER STATIC . VOID OBJECTID ( formales ) { expr }
    (25) metodo -> MODIFIER STATIC . VOID OBJECTID ( ) { expr }
    (27) metodo -> MODIFIER STATIC . TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> MODIFIER STATIC . TYPEID OBJECTID ( ) { expr }
    VOID            shift and go to state 54
    TYPEID          shift and go to state 55


state 44

    (26) metodo -> MODIFIER VOID . OBJECTID ( ) { expr }
    OBJECTID        shift and go to state 56


state 45

    (24) metodo -> MODIFIER TYPEID . VOID ( formales ) { expr }
    (28) metodo -> MODIFIER TYPEID . OBJECTID ( formales ) { expr }
    (30) metodo -> MODIFIER TYPEID . OBJECTID ( ) { expr }
    (19) atributo -> MODIFIER TYPEID . OBJECTID ASSIGN expr ;
    (20) atributo -> MODIFIER TYPEID . OBJECTID ;
    VOID            shift and go to state 57
    OBJECTID        shift and go to state 58


state 46

    (15) clase -> CLASS error { atributos metodos . }
    (32) metodos -> metodos . metodo
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 59
    MODIFIER        shift and go to state 38

    metodo                         shift and go to state 37

state 47

    (19) atributo -> MODIFIER TYPEID . OBJECTID ASSIGN expr ;
    (20) atributo -> MODIFIER TYPEID . OBJECTID ;
    OBJECTID        shift and go to state 60


state 48

    (9) clase -> CLASS TYPEID : TYPEID { metodos . }
    (32) metodos -> metodos . metodo
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 61
    MODIFIER        shift and go to state 38

    metodo                         shift and go to state 37

state 49

    (12) clase -> CLASS TYPEID : TYPEID { atributos . }
    (14) clase -> CLASS TYPEID : TYPEID { atributos . metodos }
    (22) atributos -> atributos . atributo
    (31) metodos -> . metodo
    (32) metodos -> . metodos metodo
    (19) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> . MODIFIER TYPEID OBJECTID ;
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 62
    MODIFIER        shift and go to state 42

    metodos                        shift and go to state 63
    atributo                       shift and go to state 41
    metodo                         shift and go to state 29

state 50

    (11) clase -> CLASS TYPEID : error { atributos . }
    (22) atributos -> atributos . atributo
    (19) atributo -> . MODIFIER TYPEID OBJECTID ASSIGN expr ;
    (20) atributo -> . MODIFIER TYPEID OBJECTID ;
    }               shift and go to state 64
    MODIFIER        shift and go to state 33

    atributo                       shift and go to state 41

state 51

    (24) metodo -> MODIFIER TYPEID . VOID ( formales ) { expr }
    (28) metodo -> MODIFIER TYPEID . OBJECTID ( formales ) { expr }
    (30) metodo -> MODIFIER TYPEID . OBJECTID ( ) { expr }
    VOID            shift and go to state 57
    OBJECTID        shift and go to state 65


state 52

    (16) clase -> CLASS TYPEID { atributos metodos } .
    }               reduce using rule 16 (clase -> CLASS TYPEID { atributos metodos } .)
    CLASS           reduce using rule 16 (clase -> CLASS TYPEID { atributos metodos } .)


state 53

    (19) atributo -> MODIFIER TYPEID . OBJECTID ASSIGN expr ;
    (20) atributo -> MODIFIER TYPEID . OBJECTID ;
    (24) metodo -> MODIFIER TYPEID . VOID ( formales ) { expr }
    (28) metodo -> MODIFIER TYPEID . OBJECTID ( formales ) { expr }
    (30) metodo -> MODIFIER TYPEID . OBJECTID ( ) { expr }
    OBJECTID        shift and go to state 66
    VOID            shift and go to state 57


state 54

    (23) metodo -> MODIFIER STATIC VOID . OBJECTID ( formales ) { expr }
    (25) metodo -> MODIFIER STATIC VOID . OBJECTID ( ) { expr }
    OBJECTID        shift and go to state 67


state 55

    (27) metodo -> MODIFIER STATIC TYPEID . OBJECTID ( formales ) { expr }
    (29) metodo -> MODIFIER STATIC TYPEID . OBJECTID ( ) { expr }
    OBJECTID        shift and go to state 68


state 56

    (26) metodo -> MODIFIER VOID OBJECTID . ( ) { expr }
    (               shift and go to state 69


state 57

    (24) metodo -> MODIFIER TYPEID VOID . ( formales ) { expr }
    (               shift and go to state 70


state 58

    (28) metodo -> MODIFIER TYPEID OBJECTID . ( formales ) { expr }
    (30) metodo -> MODIFIER TYPEID OBJECTID . ( ) { expr }
    (19) atributo -> MODIFIER TYPEID OBJECTID . ASSIGN expr ;
    (20) atributo -> MODIFIER TYPEID OBJECTID . ;
    (               shift and go to state 71
    ASSIGN          shift and go to state 72
    ;               shift and go to state 73


state 59

    (15) clase -> CLASS error { atributos metodos } .
    }               reduce using rule 15 (clase -> CLASS error { atributos metodos } .)
    CLASS           reduce using rule 15 (clase -> CLASS error { atributos metodos } .)


state 60

    (19) atributo -> MODIFIER TYPEID OBJECTID . ASSIGN expr ;
    (20) atributo -> MODIFIER TYPEID OBJECTID . ;
    ASSIGN          shift and go to state 72
    ;               shift and go to state 73


state 61

    (9) clase -> CLASS TYPEID : TYPEID { metodos } .
    }               reduce using rule 9 (clase -> CLASS TYPEID : TYPEID { metodos } .)
    CLASS           reduce using rule 9 (clase -> CLASS TYPEID : TYPEID { metodos } .)


state 62

    (12) clase -> CLASS TYPEID : TYPEID { atributos } .
    }               reduce using rule 12 (clase -> CLASS TYPEID : TYPEID { atributos } .)
    CLASS           reduce using rule 12 (clase -> CLASS TYPEID : TYPEID { atributos } .)


state 63

    (14) clase -> CLASS TYPEID : TYPEID { atributos metodos . }
    (32) metodos -> metodos . metodo
    (23) metodo -> . MODIFIER STATIC VOID OBJECTID ( formales ) { expr }
    (24) metodo -> . MODIFIER TYPEID VOID ( formales ) { expr }
    (25) metodo -> . MODIFIER STATIC VOID OBJECTID ( ) { expr }
    (26) metodo -> . MODIFIER VOID OBJECTID ( ) { expr }
    (27) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr }
    (28) metodo -> . MODIFIER TYPEID OBJECTID ( formales ) { expr }
    (29) metodo -> . MODIFIER STATIC TYPEID OBJECTID ( ) { expr }
    (30) metodo -> . MODIFIER TYPEID OBJECTID ( ) { expr }
    }               shift and go to state 74
    MODIFIER        shift and go to state 38

    metodo                         shift and go to state 37

state 64

    (11) clase -> CLASS TYPEID : error { atributos } .
    }               reduce using rule 11 (clase -> CLASS TYPEID : error { atributos } .)
    CLASS           reduce using rule 11 (clase -> CLASS TYPEID : error { atributos } .)


state 65

    (28) metodo -> MODIFIER TYPEID OBJECTID . ( formales ) { expr }
    (30) metodo -> MODIFIER TYPEID OBJECTID . ( ) { expr }
    (               shift and go to state 71


state 66

    (19) atributo -> MODIFIER TYPEID OBJECTID . ASSIGN expr ;
    (20) atributo -> MODIFIER TYPEID OBJECTID . ;
    (28) metodo -> MODIFIER TYPEID OBJECTID . ( formales ) { expr }
    (30) metodo -> MODIFIER TYPEID OBJECTID . ( ) { expr }
    ASSIGN          shift and go to state 72
    ;               shift and go to state 73
    (               shift and go to state 71


state 67

    (23) metodo -> MODIFIER STATIC VOID OBJECTID . ( formales ) { expr }
    (25) metodo -> MODIFIER STATIC VOID OBJECTID . ( ) { expr }
    (               shift and go to state 75


state 68

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID . ( formales ) { expr }
    (29) metodo -> MODIFIER STATIC TYPEID OBJECTID . ( ) { expr }
    (               shift and go to state 76


state 69

    (26) metodo -> MODIFIER VOID OBJECTID ( . ) { expr }
    )               shift and go to state 77


state 70

    (24) metodo -> MODIFIER TYPEID VOID ( . formales ) { expr }
    (34) formales -> . formal
    (35) formales -> . formales error formal
    (36) formales -> . formales , formal
    (33) formal -> . TYPEID OBJECTID
    TYPEID          shift and go to state 78

    formales                       shift and go to state 79
    formal                         shift and go to state 80

state 71

    (28) metodo -> MODIFIER TYPEID OBJECTID ( . formales ) { expr }
    (30) metodo -> MODIFIER TYPEID OBJECTID ( . ) { expr }
    (34) formales -> . formal
    (35) formales -> . formales error formal
    (36) formales -> . formales , formal
    (33) formal -> . TYPEID OBJECTID
    )               shift and go to state 82
    TYPEID          shift and go to state 78

    formales                       shift and go to state 81
    formal                         shift and go to state 80

state 72

    (19) atributo -> MODIFIER TYPEID OBJECTID ASSIGN . expr ;
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 85
    exprApoyo2                     shift and go to state 86

state 73

    (20) atributo -> MODIFIER TYPEID OBJECTID ; .
    }               reduce using rule 20 (atributo -> MODIFIER TYPEID OBJECTID ; .)
    MODIFIER        reduce using rule 20 (atributo -> MODIFIER TYPEID OBJECTID ; .)


state 74

    (14) clase -> CLASS TYPEID : TYPEID { atributos metodos } .
    }               reduce using rule 14 (clase -> CLASS TYPEID : TYPEID { atributos metodos } .)
    CLASS           reduce using rule 14 (clase -> CLASS TYPEID : TYPEID { atributos metodos } .)


state 75

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( . formales ) { expr }
    (25) metodo -> MODIFIER STATIC VOID OBJECTID ( . ) { expr }
    (34) formales -> . formal
    (35) formales -> . formales error formal
    (36) formales -> . formales , formal
    (33) formal -> . TYPEID OBJECTID
    )               shift and go to state 101
    TYPEID          shift and go to state 78

    formales                       shift and go to state 100
    formal                         shift and go to state 80

state 76

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( . formales ) { expr }
    (29) metodo -> MODIFIER STATIC TYPEID OBJECTID ( . ) { expr }
    (34) formales -> . formal
    (35) formales -> . formales error formal
    (36) formales -> . formales , formal
    (33) formal -> . TYPEID OBJECTID
    )               shift and go to state 103
    TYPEID          shift and go to state 78

    formales                       shift and go to state 102
    formal                         shift and go to state 80

state 77

    (26) metodo -> MODIFIER VOID OBJECTID ( ) . { expr }
    {               shift and go to state 104


state 78

    (33) formal -> TYPEID . OBJECTID
    OBJECTID        shift and go to state 105


state 79

    (24) metodo -> MODIFIER TYPEID VOID ( formales . ) { expr }
    (35) formales -> formales . error formal
    (36) formales -> formales . , formal
    )               shift and go to state 106
    error           shift and go to state 107
    ,               shift and go to state 108


state 80

    (34) formales -> formal .
    )               reduce using rule 34 (formales -> formal .)
    error           reduce using rule 34 (formales -> formal .)
    ,               reduce using rule 34 (formales -> formal .)


state 81

    (28) metodo -> MODIFIER TYPEID OBJECTID ( formales . ) { expr }
    (35) formales -> formales . error formal
    (36) formales -> formales . , formal
    )               shift and go to state 109
    error           shift and go to state 107
    ,               shift and go to state 108


state 82

    (30) metodo -> MODIFIER TYPEID OBJECTID ( ) . { expr }
    {               shift and go to state 110


state 83

    (61) expr -> TYPEID . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> TYPEID . . OBJECTID ( ) ;
    (68) expr -> TYPEID . OBJECTID ASSIGN expr ;
    .               shift and go to state 111
    OBJECTID        shift and go to state 112


state 84

    (42) expr -> OBJECTID .
    (64) expr -> OBJECTID . ( exprApoyo1 )
    (65) expr -> OBJECTID . ( exprApoyo1 ) ;
    (67) expr -> OBJECTID . ( ) ;
    (69) expr -> OBJECTID . ASSIGN expr ;
    ;               reduce using rule 42 (expr -> OBJECTID .)
    OR              reduce using rule 42 (expr -> OBJECTID .)
    AND             reduce using rule 42 (expr -> OBJECTID .)
    LE              reduce using rule 42 (expr -> OBJECTID .)
    DIFFERENT       reduce using rule 42 (expr -> OBJECTID .)
    EQUALS          reduce using rule 42 (expr -> OBJECTID .)
    /               reduce using rule 42 (expr -> OBJECTID .)
    *               reduce using rule 42 (expr -> OBJECTID .)
    -               reduce using rule 42 (expr -> OBJECTID .)
    +               reduce using rule 42 (expr -> OBJECTID .)
    .               reduce using rule 42 (expr -> OBJECTID .)
    BOOL_CONST      reduce using rule 42 (expr -> OBJECTID .)
    STR_CONST       reduce using rule 42 (expr -> OBJECTID .)
    FLOAT_CONST     reduce using rule 42 (expr -> OBJECTID .)
    INT_CONST       reduce using rule 42 (expr -> OBJECTID .)
    OBJECTID        reduce using rule 42 (expr -> OBJECTID .)
    !               reduce using rule 42 (expr -> OBJECTID .)
    NEW             reduce using rule 42 (expr -> OBJECTID .)
    {               reduce using rule 42 (expr -> OBJECTID .)
    FUNCT           reduce using rule 42 (expr -> OBJECTID .)
    SWITCH          reduce using rule 42 (expr -> OBJECTID .)
    FOREACH         reduce using rule 42 (expr -> OBJECTID .)
    WHILE           reduce using rule 42 (expr -> OBJECTID .)
    IF              reduce using rule 42 (expr -> OBJECTID .)
    RETURN          reduce using rule 42 (expr -> OBJECTID .)
    TYPEID          reduce using rule 42 (expr -> OBJECTID .)
    ,               reduce using rule 42 (expr -> OBJECTID .)
    }               reduce using rule 42 (expr -> OBJECTID .)
    )               reduce using rule 42 (expr -> OBJECTID .)
    :               reduce using rule 42 (expr -> OBJECTID .)
    BREAK           reduce using rule 42 (expr -> OBJECTID .)
    (               shift and go to state 113
    ASSIGN          shift and go to state 114


state 85

    (19) atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr . ;
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               shift and go to state 116
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 86

    (37) expr -> exprApoyo2 .
    (76) exprApoyo2 -> exprApoyo2 . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
  ! shift/reduce conflict for BOOL_CONST resolved as shift
  ! shift/reduce conflict for STR_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for OBJECTID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for FUNCT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
    ;               reduce using rule 37 (expr -> exprApoyo2 .)
    OR              reduce using rule 37 (expr -> exprApoyo2 .)
    AND             reduce using rule 37 (expr -> exprApoyo2 .)
    LE              reduce using rule 37 (expr -> exprApoyo2 .)
    DIFFERENT       reduce using rule 37 (expr -> exprApoyo2 .)
    EQUALS          reduce using rule 37 (expr -> exprApoyo2 .)
    /               reduce using rule 37 (expr -> exprApoyo2 .)
    *               reduce using rule 37 (expr -> exprApoyo2 .)
    -               reduce using rule 37 (expr -> exprApoyo2 .)
    +               reduce using rule 37 (expr -> exprApoyo2 .)
    .               reduce using rule 37 (expr -> exprApoyo2 .)
    ,               reduce using rule 37 (expr -> exprApoyo2 .)
    }               reduce using rule 37 (expr -> exprApoyo2 .)
    )               reduce using rule 37 (expr -> exprApoyo2 .)
    :               reduce using rule 37 (expr -> exprApoyo2 .)
    BREAK           reduce using rule 37 (expr -> exprApoyo2 .)
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    exprApoyo2                     shift and go to state 86
    expr                           shift and go to state 127

state 87

    (38) expr -> BOOL_CONST .
    ;               reduce using rule 38 (expr -> BOOL_CONST .)
    OR              reduce using rule 38 (expr -> BOOL_CONST .)
    AND             reduce using rule 38 (expr -> BOOL_CONST .)
    LE              reduce using rule 38 (expr -> BOOL_CONST .)
    DIFFERENT       reduce using rule 38 (expr -> BOOL_CONST .)
    EQUALS          reduce using rule 38 (expr -> BOOL_CONST .)
    /               reduce using rule 38 (expr -> BOOL_CONST .)
    *               reduce using rule 38 (expr -> BOOL_CONST .)
    -               reduce using rule 38 (expr -> BOOL_CONST .)
    +               reduce using rule 38 (expr -> BOOL_CONST .)
    .               reduce using rule 38 (expr -> BOOL_CONST .)
    BOOL_CONST      reduce using rule 38 (expr -> BOOL_CONST .)
    STR_CONST       reduce using rule 38 (expr -> BOOL_CONST .)
    FLOAT_CONST     reduce using rule 38 (expr -> BOOL_CONST .)
    INT_CONST       reduce using rule 38 (expr -> BOOL_CONST .)
    OBJECTID        reduce using rule 38 (expr -> BOOL_CONST .)
    !               reduce using rule 38 (expr -> BOOL_CONST .)
    NEW             reduce using rule 38 (expr -> BOOL_CONST .)
    {               reduce using rule 38 (expr -> BOOL_CONST .)
    FUNCT           reduce using rule 38 (expr -> BOOL_CONST .)
    SWITCH          reduce using rule 38 (expr -> BOOL_CONST .)
    FOREACH         reduce using rule 38 (expr -> BOOL_CONST .)
    WHILE           reduce using rule 38 (expr -> BOOL_CONST .)
    IF              reduce using rule 38 (expr -> BOOL_CONST .)
    RETURN          reduce using rule 38 (expr -> BOOL_CONST .)
    TYPEID          reduce using rule 38 (expr -> BOOL_CONST .)
    ,               reduce using rule 38 (expr -> BOOL_CONST .)
    }               reduce using rule 38 (expr -> BOOL_CONST .)
    )               reduce using rule 38 (expr -> BOOL_CONST .)
    :               reduce using rule 38 (expr -> BOOL_CONST .)
    BREAK           reduce using rule 38 (expr -> BOOL_CONST .)


state 88

    (39) expr -> STR_CONST .
    ;               reduce using rule 39 (expr -> STR_CONST .)
    OR              reduce using rule 39 (expr -> STR_CONST .)
    AND             reduce using rule 39 (expr -> STR_CONST .)
    LE              reduce using rule 39 (expr -> STR_CONST .)
    DIFFERENT       reduce using rule 39 (expr -> STR_CONST .)
    EQUALS          reduce using rule 39 (expr -> STR_CONST .)
    /               reduce using rule 39 (expr -> STR_CONST .)
    *               reduce using rule 39 (expr -> STR_CONST .)
    -               reduce using rule 39 (expr -> STR_CONST .)
    +               reduce using rule 39 (expr -> STR_CONST .)
    .               reduce using rule 39 (expr -> STR_CONST .)
    BOOL_CONST      reduce using rule 39 (expr -> STR_CONST .)
    STR_CONST       reduce using rule 39 (expr -> STR_CONST .)
    FLOAT_CONST     reduce using rule 39 (expr -> STR_CONST .)
    INT_CONST       reduce using rule 39 (expr -> STR_CONST .)
    OBJECTID        reduce using rule 39 (expr -> STR_CONST .)
    !               reduce using rule 39 (expr -> STR_CONST .)
    NEW             reduce using rule 39 (expr -> STR_CONST .)
    {               reduce using rule 39 (expr -> STR_CONST .)
    FUNCT           reduce using rule 39 (expr -> STR_CONST .)
    SWITCH          reduce using rule 39 (expr -> STR_CONST .)
    FOREACH         reduce using rule 39 (expr -> STR_CONST .)
    WHILE           reduce using rule 39 (expr -> STR_CONST .)
    IF              reduce using rule 39 (expr -> STR_CONST .)
    RETURN          reduce using rule 39 (expr -> STR_CONST .)
    TYPEID          reduce using rule 39 (expr -> STR_CONST .)
    ,               reduce using rule 39 (expr -> STR_CONST .)
    }               reduce using rule 39 (expr -> STR_CONST .)
    )               reduce using rule 39 (expr -> STR_CONST .)
    :               reduce using rule 39 (expr -> STR_CONST .)
    BREAK           reduce using rule 39 (expr -> STR_CONST .)


state 89

    (40) expr -> FLOAT_CONST .
    ;               reduce using rule 40 (expr -> FLOAT_CONST .)
    OR              reduce using rule 40 (expr -> FLOAT_CONST .)
    AND             reduce using rule 40 (expr -> FLOAT_CONST .)
    LE              reduce using rule 40 (expr -> FLOAT_CONST .)
    DIFFERENT       reduce using rule 40 (expr -> FLOAT_CONST .)
    EQUALS          reduce using rule 40 (expr -> FLOAT_CONST .)
    /               reduce using rule 40 (expr -> FLOAT_CONST .)
    *               reduce using rule 40 (expr -> FLOAT_CONST .)
    -               reduce using rule 40 (expr -> FLOAT_CONST .)
    +               reduce using rule 40 (expr -> FLOAT_CONST .)
    .               reduce using rule 40 (expr -> FLOAT_CONST .)
    BOOL_CONST      reduce using rule 40 (expr -> FLOAT_CONST .)
    STR_CONST       reduce using rule 40 (expr -> FLOAT_CONST .)
    FLOAT_CONST     reduce using rule 40 (expr -> FLOAT_CONST .)
    INT_CONST       reduce using rule 40 (expr -> FLOAT_CONST .)
    OBJECTID        reduce using rule 40 (expr -> FLOAT_CONST .)
    !               reduce using rule 40 (expr -> FLOAT_CONST .)
    NEW             reduce using rule 40 (expr -> FLOAT_CONST .)
    {               reduce using rule 40 (expr -> FLOAT_CONST .)
    FUNCT           reduce using rule 40 (expr -> FLOAT_CONST .)
    SWITCH          reduce using rule 40 (expr -> FLOAT_CONST .)
    FOREACH         reduce using rule 40 (expr -> FLOAT_CONST .)
    WHILE           reduce using rule 40 (expr -> FLOAT_CONST .)
    IF              reduce using rule 40 (expr -> FLOAT_CONST .)
    RETURN          reduce using rule 40 (expr -> FLOAT_CONST .)
    TYPEID          reduce using rule 40 (expr -> FLOAT_CONST .)
    ,               reduce using rule 40 (expr -> FLOAT_CONST .)
    }               reduce using rule 40 (expr -> FLOAT_CONST .)
    )               reduce using rule 40 (expr -> FLOAT_CONST .)
    :               reduce using rule 40 (expr -> FLOAT_CONST .)
    BREAK           reduce using rule 40 (expr -> FLOAT_CONST .)


state 90

    (41) expr -> INT_CONST .
    ;               reduce using rule 41 (expr -> INT_CONST .)
    OR              reduce using rule 41 (expr -> INT_CONST .)
    AND             reduce using rule 41 (expr -> INT_CONST .)
    LE              reduce using rule 41 (expr -> INT_CONST .)
    DIFFERENT       reduce using rule 41 (expr -> INT_CONST .)
    EQUALS          reduce using rule 41 (expr -> INT_CONST .)
    /               reduce using rule 41 (expr -> INT_CONST .)
    *               reduce using rule 41 (expr -> INT_CONST .)
    -               reduce using rule 41 (expr -> INT_CONST .)
    +               reduce using rule 41 (expr -> INT_CONST .)
    .               reduce using rule 41 (expr -> INT_CONST .)
    BOOL_CONST      reduce using rule 41 (expr -> INT_CONST .)
    STR_CONST       reduce using rule 41 (expr -> INT_CONST .)
    FLOAT_CONST     reduce using rule 41 (expr -> INT_CONST .)
    INT_CONST       reduce using rule 41 (expr -> INT_CONST .)
    OBJECTID        reduce using rule 41 (expr -> INT_CONST .)
    !               reduce using rule 41 (expr -> INT_CONST .)
    NEW             reduce using rule 41 (expr -> INT_CONST .)
    {               reduce using rule 41 (expr -> INT_CONST .)
    FUNCT           reduce using rule 41 (expr -> INT_CONST .)
    SWITCH          reduce using rule 41 (expr -> INT_CONST .)
    FOREACH         reduce using rule 41 (expr -> INT_CONST .)
    WHILE           reduce using rule 41 (expr -> INT_CONST .)
    IF              reduce using rule 41 (expr -> INT_CONST .)
    RETURN          reduce using rule 41 (expr -> INT_CONST .)
    TYPEID          reduce using rule 41 (expr -> INT_CONST .)
    ,               reduce using rule 41 (expr -> INT_CONST .)
    }               reduce using rule 41 (expr -> INT_CONST .)
    )               reduce using rule 41 (expr -> INT_CONST .)
    :               reduce using rule 41 (expr -> INT_CONST .)
    BREAK           reduce using rule 41 (expr -> INT_CONST .)


state 91

    (48) expr -> ! . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 128
    exprApoyo2                     shift and go to state 86

state 92

    (53) expr -> NEW . TYPEID ( )
    TYPEID          shift and go to state 129


state 93

    (54) expr -> { . exprApoyo3 }
    (74) exprApoyo3 -> . exprApoyo3 , expr
    (75) exprApoyo3 -> . expr , expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    exprApoyo3                     shift and go to state 130
    expr                           shift and go to state 131
    exprApoyo2                     shift and go to state 86

state 94

    (55) expr -> FUNCT . < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    <               shift and go to state 132


state 95

    (56) expr -> SWITCH . ( expr ) { cases }
    (               shift and go to state 133


state 96

    (57) expr -> FOREACH . ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (               shift and go to state 134


state 97

    (58) expr -> WHILE . ( expr ) { expr }
    (               shift and go to state 135


state 98

    (59) expr -> IF . ( expr ) { expr } ELSE { expr }
    (               shift and go to state 136


state 99

    (60) expr -> RETURN . expr ;
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 137
    exprApoyo2                     shift and go to state 86

state 100

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( formales . ) { expr }
    (35) formales -> formales . error formal
    (36) formales -> formales . , formal
    )               shift and go to state 138
    error           shift and go to state 107
    ,               shift and go to state 108


state 101

    (25) metodo -> MODIFIER STATIC VOID OBJECTID ( ) . { expr }
    {               shift and go to state 139


state 102

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales . ) { expr }
    (35) formales -> formales . error formal
    (36) formales -> formales . , formal
    )               shift and go to state 140
    error           shift and go to state 107
    ,               shift and go to state 108


state 103

    (29) metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) . { expr }
    {               shift and go to state 141


state 104

    (26) metodo -> MODIFIER VOID OBJECTID ( ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 142
    exprApoyo2                     shift and go to state 86

state 105

    (33) formal -> TYPEID OBJECTID .
    )               reduce using rule 33 (formal -> TYPEID OBJECTID .)
    error           reduce using rule 33 (formal -> TYPEID OBJECTID .)
    ,               reduce using rule 33 (formal -> TYPEID OBJECTID .)


state 106

    (24) metodo -> MODIFIER TYPEID VOID ( formales ) . { expr }
    {               shift and go to state 143


state 107

    (35) formales -> formales error . formal
    (33) formal -> . TYPEID OBJECTID
    TYPEID          shift and go to state 78

    formal                         shift and go to state 144

state 108

    (36) formales -> formales , . formal
    (33) formal -> . TYPEID OBJECTID
    TYPEID          shift and go to state 78

    formal                         shift and go to state 145

state 109

    (28) metodo -> MODIFIER TYPEID OBJECTID ( formales ) . { expr }
    {               shift and go to state 146


state 110

    (30) metodo -> MODIFIER TYPEID OBJECTID ( ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 147
    exprApoyo2                     shift and go to state 86

state 111

    (61) expr -> TYPEID . . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> TYPEID . . OBJECTID ( ) ;
    OBJECTID        shift and go to state 148


state 112

    (68) expr -> TYPEID OBJECTID . ASSIGN expr ;
    ASSIGN          shift and go to state 149


state 113

    (64) expr -> OBJECTID ( . exprApoyo1 )
    (65) expr -> OBJECTID ( . exprApoyo1 ) ;
    (67) expr -> OBJECTID ( . ) ;
    (78) exprApoyo1 -> . expr
    (79) exprApoyo1 -> . exprApoyo1 , expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    )               shift and go to state 151
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    exprApoyo1                     shift and go to state 150
    expr                           shift and go to state 152
    exprApoyo2                     shift and go to state 86

state 114

    (69) expr -> OBJECTID ASSIGN . expr ;
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 153
    exprApoyo2                     shift and go to state 86

state 115

    (77) exprApoyo2 -> expr expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for BOOL_CONST resolved as shift
  ! shift/reduce conflict for STR_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for OBJECTID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for FUNCT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
    ;               reduce using rule 77 (exprApoyo2 -> expr expr .)
    ,               reduce using rule 77 (exprApoyo2 -> expr expr .)
    }               reduce using rule 77 (exprApoyo2 -> expr expr .)
    )               reduce using rule 77 (exprApoyo2 -> expr expr .)
    :               reduce using rule 77 (exprApoyo2 -> expr expr .)
    BREAK           reduce using rule 77 (exprApoyo2 -> expr expr .)
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 116

    (19) atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr ; .
    }               reduce using rule 19 (atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr ; .)
    MODIFIER        reduce using rule 19 (atributo -> MODIFIER TYPEID OBJECTID ASSIGN expr ; .)


state 117

    (43) expr -> expr OR . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 154
    exprApoyo2                     shift and go to state 86

state 118

    (44) expr -> expr AND . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 155
    exprApoyo2                     shift and go to state 86

state 119

    (45) expr -> expr LE . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 156
    exprApoyo2                     shift and go to state 86

state 120

    (46) expr -> expr DIFFERENT . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 157
    exprApoyo2                     shift and go to state 86

state 121

    (47) expr -> expr EQUALS . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 158
    exprApoyo2                     shift and go to state 86

state 122

    (49) expr -> expr / . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 159
    exprApoyo2                     shift and go to state 86

state 123

    (50) expr -> expr * . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 160
    exprApoyo2                     shift and go to state 86

state 124

    (51) expr -> expr - . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 161
    exprApoyo2                     shift and go to state 86

state 125

    (52) expr -> expr + . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 162
    exprApoyo2                     shift and go to state 86

state 126

    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    OBJECTID        shift and go to state 163


state 127

    (76) exprApoyo2 -> exprApoyo2 expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for DIFFERENT resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for BOOL_CONST resolved as shift
  ! shift/reduce conflict for STR_CONST resolved as shift
  ! shift/reduce conflict for FLOAT_CONST resolved as shift
  ! shift/reduce conflict for INT_CONST resolved as shift
  ! shift/reduce conflict for OBJECTID resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for FUNCT resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for FOREACH resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for TYPEID resolved as shift
    ;               reduce using rule 76 (exprApoyo2 -> exprApoyo2 expr .)
    ,               reduce using rule 76 (exprApoyo2 -> exprApoyo2 expr .)
    }               reduce using rule 76 (exprApoyo2 -> exprApoyo2 expr .)
    )               reduce using rule 76 (exprApoyo2 -> exprApoyo2 expr .)
    :               reduce using rule 76 (exprApoyo2 -> exprApoyo2 expr .)
    BREAK           reduce using rule 76 (exprApoyo2 -> exprApoyo2 expr .)
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    exprApoyo2                     shift and go to state 86
    expr                           shift and go to state 115

state 128

    (48) expr -> ! expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 48 (expr -> ! expr .)
    OR              reduce using rule 48 (expr -> ! expr .)
    AND             reduce using rule 48 (expr -> ! expr .)
    LE              reduce using rule 48 (expr -> ! expr .)
    DIFFERENT       reduce using rule 48 (expr -> ! expr .)
    EQUALS          reduce using rule 48 (expr -> ! expr .)
    /               reduce using rule 48 (expr -> ! expr .)
    *               reduce using rule 48 (expr -> ! expr .)
    -               reduce using rule 48 (expr -> ! expr .)
    +               reduce using rule 48 (expr -> ! expr .)
    .               reduce using rule 48 (expr -> ! expr .)
    BOOL_CONST      reduce using rule 48 (expr -> ! expr .)
    STR_CONST       reduce using rule 48 (expr -> ! expr .)
    FLOAT_CONST     reduce using rule 48 (expr -> ! expr .)
    INT_CONST       reduce using rule 48 (expr -> ! expr .)
    OBJECTID        reduce using rule 48 (expr -> ! expr .)
    NEW             reduce using rule 48 (expr -> ! expr .)
    {               reduce using rule 48 (expr -> ! expr .)
    FUNCT           reduce using rule 48 (expr -> ! expr .)
    SWITCH          reduce using rule 48 (expr -> ! expr .)
    FOREACH         reduce using rule 48 (expr -> ! expr .)
    WHILE           reduce using rule 48 (expr -> ! expr .)
    IF              reduce using rule 48 (expr -> ! expr .)
    RETURN          reduce using rule 48 (expr -> ! expr .)
    TYPEID          reduce using rule 48 (expr -> ! expr .)
    ,               reduce using rule 48 (expr -> ! expr .)
    }               reduce using rule 48 (expr -> ! expr .)
    )               reduce using rule 48 (expr -> ! expr .)
    :               reduce using rule 48 (expr -> ! expr .)
    BREAK           reduce using rule 48 (expr -> ! expr .)
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 129

    (53) expr -> NEW TYPEID . ( )
    (               shift and go to state 164


state 130

    (54) expr -> { exprApoyo3 . }
    (74) exprApoyo3 -> exprApoyo3 . , expr
    }               shift and go to state 165
    ,               shift and go to state 166


state 131

    (75) exprApoyo3 -> expr . , expr
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ,               shift and go to state 167
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 132

    (55) expr -> FUNCT < . TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    TYPEID          shift and go to state 168


state 133

    (56) expr -> SWITCH ( . expr ) { cases }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 169
    exprApoyo2                     shift and go to state 86

state 134

    (57) expr -> FOREACH ( . TYPEID OBJECTID IN OBJECTID ) { expr }
    TYPEID          shift and go to state 170


state 135

    (58) expr -> WHILE ( . expr ) { expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 171
    exprApoyo2                     shift and go to state 86

state 136

    (59) expr -> IF ( . expr ) { expr } ELSE { expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 172
    exprApoyo2                     shift and go to state 86

state 137

    (60) expr -> RETURN expr . ;
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               shift and go to state 173
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 138

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) . { expr }
    {               shift and go to state 174


state 139

    (25) metodo -> MODIFIER STATIC VOID OBJECTID ( ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 175
    exprApoyo2                     shift and go to state 86

state 140

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) . { expr }
    {               shift and go to state 176


state 141

    (29) metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 177
    exprApoyo2                     shift and go to state 86

state 142

    (26) metodo -> MODIFIER VOID OBJECTID ( ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 178
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 143

    (24) metodo -> MODIFIER TYPEID VOID ( formales ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 179
    exprApoyo2                     shift and go to state 86

state 144

    (35) formales -> formales error formal .
    )               reduce using rule 35 (formales -> formales error formal .)
    error           reduce using rule 35 (formales -> formales error formal .)
    ,               reduce using rule 35 (formales -> formales error formal .)


state 145

    (36) formales -> formales , formal .
    )               reduce using rule 36 (formales -> formales , formal .)
    error           reduce using rule 36 (formales -> formales , formal .)
    ,               reduce using rule 36 (formales -> formales , formal .)


state 146

    (28) metodo -> MODIFIER TYPEID OBJECTID ( formales ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 180
    exprApoyo2                     shift and go to state 86

state 147

    (30) metodo -> MODIFIER TYPEID OBJECTID ( ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 181
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 148

    (61) expr -> TYPEID . OBJECTID . ( exprApoyo1 ) ;
    (62) expr -> TYPEID . OBJECTID . ( ) ;
    (               shift and go to state 182


state 149

    (68) expr -> TYPEID OBJECTID ASSIGN . expr ;
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 183
    exprApoyo2                     shift and go to state 86

state 150

    (64) expr -> OBJECTID ( exprApoyo1 . )
    (65) expr -> OBJECTID ( exprApoyo1 . ) ;
    (79) exprApoyo1 -> exprApoyo1 . , expr
    )               shift and go to state 184
    ,               shift and go to state 185


state 151

    (67) expr -> OBJECTID ( ) . ;
    ;               shift and go to state 186


state 152

    (78) exprApoyo1 -> expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    )               reduce using rule 78 (exprApoyo1 -> expr .)
    ,               reduce using rule 78 (exprApoyo1 -> expr .)
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 153

    (69) expr -> OBJECTID ASSIGN expr . ;
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               shift and go to state 187
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 154

    (43) expr -> expr OR expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 43 (expr -> expr OR expr .)
    OR              reduce using rule 43 (expr -> expr OR expr .)
    .               reduce using rule 43 (expr -> expr OR expr .)
    BOOL_CONST      reduce using rule 43 (expr -> expr OR expr .)
    STR_CONST       reduce using rule 43 (expr -> expr OR expr .)
    FLOAT_CONST     reduce using rule 43 (expr -> expr OR expr .)
    INT_CONST       reduce using rule 43 (expr -> expr OR expr .)
    OBJECTID        reduce using rule 43 (expr -> expr OR expr .)
    NEW             reduce using rule 43 (expr -> expr OR expr .)
    {               reduce using rule 43 (expr -> expr OR expr .)
    FUNCT           reduce using rule 43 (expr -> expr OR expr .)
    SWITCH          reduce using rule 43 (expr -> expr OR expr .)
    FOREACH         reduce using rule 43 (expr -> expr OR expr .)
    WHILE           reduce using rule 43 (expr -> expr OR expr .)
    IF              reduce using rule 43 (expr -> expr OR expr .)
    RETURN          reduce using rule 43 (expr -> expr OR expr .)
    TYPEID          reduce using rule 43 (expr -> expr OR expr .)
    ,               reduce using rule 43 (expr -> expr OR expr .)
    }               reduce using rule 43 (expr -> expr OR expr .)
    )               reduce using rule 43 (expr -> expr OR expr .)
    :               reduce using rule 43 (expr -> expr OR expr .)
    BREAK           reduce using rule 43 (expr -> expr OR expr .)
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 155

    (44) expr -> expr AND expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 44 (expr -> expr AND expr .)
    OR              reduce using rule 44 (expr -> expr AND expr .)
    AND             reduce using rule 44 (expr -> expr AND expr .)
    .               reduce using rule 44 (expr -> expr AND expr .)
    BOOL_CONST      reduce using rule 44 (expr -> expr AND expr .)
    STR_CONST       reduce using rule 44 (expr -> expr AND expr .)
    FLOAT_CONST     reduce using rule 44 (expr -> expr AND expr .)
    INT_CONST       reduce using rule 44 (expr -> expr AND expr .)
    OBJECTID        reduce using rule 44 (expr -> expr AND expr .)
    NEW             reduce using rule 44 (expr -> expr AND expr .)
    {               reduce using rule 44 (expr -> expr AND expr .)
    FUNCT           reduce using rule 44 (expr -> expr AND expr .)
    SWITCH          reduce using rule 44 (expr -> expr AND expr .)
    FOREACH         reduce using rule 44 (expr -> expr AND expr .)
    WHILE           reduce using rule 44 (expr -> expr AND expr .)
    IF              reduce using rule 44 (expr -> expr AND expr .)
    RETURN          reduce using rule 44 (expr -> expr AND expr .)
    TYPEID          reduce using rule 44 (expr -> expr AND expr .)
    ,               reduce using rule 44 (expr -> expr AND expr .)
    }               reduce using rule 44 (expr -> expr AND expr .)
    )               reduce using rule 44 (expr -> expr AND expr .)
    :               reduce using rule 44 (expr -> expr AND expr .)
    BREAK           reduce using rule 44 (expr -> expr AND expr .)
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 156

    (45) expr -> expr LE expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 45 (expr -> expr LE expr .)
    OR              reduce using rule 45 (expr -> expr LE expr .)
    AND             reduce using rule 45 (expr -> expr LE expr .)
    LE              reduce using rule 45 (expr -> expr LE expr .)
    DIFFERENT       reduce using rule 45 (expr -> expr LE expr .)
    EQUALS          reduce using rule 45 (expr -> expr LE expr .)
    .               reduce using rule 45 (expr -> expr LE expr .)
    BOOL_CONST      reduce using rule 45 (expr -> expr LE expr .)
    STR_CONST       reduce using rule 45 (expr -> expr LE expr .)
    FLOAT_CONST     reduce using rule 45 (expr -> expr LE expr .)
    INT_CONST       reduce using rule 45 (expr -> expr LE expr .)
    OBJECTID        reduce using rule 45 (expr -> expr LE expr .)
    NEW             reduce using rule 45 (expr -> expr LE expr .)
    {               reduce using rule 45 (expr -> expr LE expr .)
    FUNCT           reduce using rule 45 (expr -> expr LE expr .)
    SWITCH          reduce using rule 45 (expr -> expr LE expr .)
    FOREACH         reduce using rule 45 (expr -> expr LE expr .)
    WHILE           reduce using rule 45 (expr -> expr LE expr .)
    IF              reduce using rule 45 (expr -> expr LE expr .)
    RETURN          reduce using rule 45 (expr -> expr LE expr .)
    TYPEID          reduce using rule 45 (expr -> expr LE expr .)
    ,               reduce using rule 45 (expr -> expr LE expr .)
    }               reduce using rule 45 (expr -> expr LE expr .)
    )               reduce using rule 45 (expr -> expr LE expr .)
    :               reduce using rule 45 (expr -> expr LE expr .)
    BREAK           reduce using rule 45 (expr -> expr LE expr .)
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 157

    (46) expr -> expr DIFFERENT expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 46 (expr -> expr DIFFERENT expr .)
    OR              reduce using rule 46 (expr -> expr DIFFERENT expr .)
    AND             reduce using rule 46 (expr -> expr DIFFERENT expr .)
    DIFFERENT       reduce using rule 46 (expr -> expr DIFFERENT expr .)
    EQUALS          reduce using rule 46 (expr -> expr DIFFERENT expr .)
    .               reduce using rule 46 (expr -> expr DIFFERENT expr .)
    BOOL_CONST      reduce using rule 46 (expr -> expr DIFFERENT expr .)
    STR_CONST       reduce using rule 46 (expr -> expr DIFFERENT expr .)
    FLOAT_CONST     reduce using rule 46 (expr -> expr DIFFERENT expr .)
    INT_CONST       reduce using rule 46 (expr -> expr DIFFERENT expr .)
    OBJECTID        reduce using rule 46 (expr -> expr DIFFERENT expr .)
    NEW             reduce using rule 46 (expr -> expr DIFFERENT expr .)
    {               reduce using rule 46 (expr -> expr DIFFERENT expr .)
    FUNCT           reduce using rule 46 (expr -> expr DIFFERENT expr .)
    SWITCH          reduce using rule 46 (expr -> expr DIFFERENT expr .)
    FOREACH         reduce using rule 46 (expr -> expr DIFFERENT expr .)
    WHILE           reduce using rule 46 (expr -> expr DIFFERENT expr .)
    IF              reduce using rule 46 (expr -> expr DIFFERENT expr .)
    RETURN          reduce using rule 46 (expr -> expr DIFFERENT expr .)
    TYPEID          reduce using rule 46 (expr -> expr DIFFERENT expr .)
    ,               reduce using rule 46 (expr -> expr DIFFERENT expr .)
    }               reduce using rule 46 (expr -> expr DIFFERENT expr .)
    )               reduce using rule 46 (expr -> expr DIFFERENT expr .)
    :               reduce using rule 46 (expr -> expr DIFFERENT expr .)
    BREAK           reduce using rule 46 (expr -> expr DIFFERENT expr .)
    LE              shift and go to state 119
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 158

    (47) expr -> expr EQUALS expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 47 (expr -> expr EQUALS expr .)
    OR              reduce using rule 47 (expr -> expr EQUALS expr .)
    AND             reduce using rule 47 (expr -> expr EQUALS expr .)
    DIFFERENT       reduce using rule 47 (expr -> expr EQUALS expr .)
    EQUALS          reduce using rule 47 (expr -> expr EQUALS expr .)
    .               reduce using rule 47 (expr -> expr EQUALS expr .)
    BOOL_CONST      reduce using rule 47 (expr -> expr EQUALS expr .)
    STR_CONST       reduce using rule 47 (expr -> expr EQUALS expr .)
    FLOAT_CONST     reduce using rule 47 (expr -> expr EQUALS expr .)
    INT_CONST       reduce using rule 47 (expr -> expr EQUALS expr .)
    OBJECTID        reduce using rule 47 (expr -> expr EQUALS expr .)
    NEW             reduce using rule 47 (expr -> expr EQUALS expr .)
    {               reduce using rule 47 (expr -> expr EQUALS expr .)
    FUNCT           reduce using rule 47 (expr -> expr EQUALS expr .)
    SWITCH          reduce using rule 47 (expr -> expr EQUALS expr .)
    FOREACH         reduce using rule 47 (expr -> expr EQUALS expr .)
    WHILE           reduce using rule 47 (expr -> expr EQUALS expr .)
    IF              reduce using rule 47 (expr -> expr EQUALS expr .)
    RETURN          reduce using rule 47 (expr -> expr EQUALS expr .)
    TYPEID          reduce using rule 47 (expr -> expr EQUALS expr .)
    ,               reduce using rule 47 (expr -> expr EQUALS expr .)
    }               reduce using rule 47 (expr -> expr EQUALS expr .)
    )               reduce using rule 47 (expr -> expr EQUALS expr .)
    :               reduce using rule 47 (expr -> expr EQUALS expr .)
    BREAK           reduce using rule 47 (expr -> expr EQUALS expr .)
    LE              shift and go to state 119
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 159

    (49) expr -> expr / expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 49 (expr -> expr / expr .)
    OR              reduce using rule 49 (expr -> expr / expr .)
    AND             reduce using rule 49 (expr -> expr / expr .)
    LE              reduce using rule 49 (expr -> expr / expr .)
    DIFFERENT       reduce using rule 49 (expr -> expr / expr .)
    EQUALS          reduce using rule 49 (expr -> expr / expr .)
    /               reduce using rule 49 (expr -> expr / expr .)
    *               reduce using rule 49 (expr -> expr / expr .)
    -               reduce using rule 49 (expr -> expr / expr .)
    +               reduce using rule 49 (expr -> expr / expr .)
    .               reduce using rule 49 (expr -> expr / expr .)
    BOOL_CONST      reduce using rule 49 (expr -> expr / expr .)
    STR_CONST       reduce using rule 49 (expr -> expr / expr .)
    FLOAT_CONST     reduce using rule 49 (expr -> expr / expr .)
    INT_CONST       reduce using rule 49 (expr -> expr / expr .)
    OBJECTID        reduce using rule 49 (expr -> expr / expr .)
    NEW             reduce using rule 49 (expr -> expr / expr .)
    {               reduce using rule 49 (expr -> expr / expr .)
    FUNCT           reduce using rule 49 (expr -> expr / expr .)
    SWITCH          reduce using rule 49 (expr -> expr / expr .)
    FOREACH         reduce using rule 49 (expr -> expr / expr .)
    WHILE           reduce using rule 49 (expr -> expr / expr .)
    IF              reduce using rule 49 (expr -> expr / expr .)
    RETURN          reduce using rule 49 (expr -> expr / expr .)
    TYPEID          reduce using rule 49 (expr -> expr / expr .)
    ,               reduce using rule 49 (expr -> expr / expr .)
    }               reduce using rule 49 (expr -> expr / expr .)
    )               reduce using rule 49 (expr -> expr / expr .)
    :               reduce using rule 49 (expr -> expr / expr .)
    BREAK           reduce using rule 49 (expr -> expr / expr .)
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 160

    (50) expr -> expr * expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 50 (expr -> expr * expr .)
    OR              reduce using rule 50 (expr -> expr * expr .)
    AND             reduce using rule 50 (expr -> expr * expr .)
    LE              reduce using rule 50 (expr -> expr * expr .)
    DIFFERENT       reduce using rule 50 (expr -> expr * expr .)
    EQUALS          reduce using rule 50 (expr -> expr * expr .)
    /               reduce using rule 50 (expr -> expr * expr .)
    *               reduce using rule 50 (expr -> expr * expr .)
    -               reduce using rule 50 (expr -> expr * expr .)
    +               reduce using rule 50 (expr -> expr * expr .)
    .               reduce using rule 50 (expr -> expr * expr .)
    BOOL_CONST      reduce using rule 50 (expr -> expr * expr .)
    STR_CONST       reduce using rule 50 (expr -> expr * expr .)
    FLOAT_CONST     reduce using rule 50 (expr -> expr * expr .)
    INT_CONST       reduce using rule 50 (expr -> expr * expr .)
    OBJECTID        reduce using rule 50 (expr -> expr * expr .)
    NEW             reduce using rule 50 (expr -> expr * expr .)
    {               reduce using rule 50 (expr -> expr * expr .)
    FUNCT           reduce using rule 50 (expr -> expr * expr .)
    SWITCH          reduce using rule 50 (expr -> expr * expr .)
    FOREACH         reduce using rule 50 (expr -> expr * expr .)
    WHILE           reduce using rule 50 (expr -> expr * expr .)
    IF              reduce using rule 50 (expr -> expr * expr .)
    RETURN          reduce using rule 50 (expr -> expr * expr .)
    TYPEID          reduce using rule 50 (expr -> expr * expr .)
    ,               reduce using rule 50 (expr -> expr * expr .)
    }               reduce using rule 50 (expr -> expr * expr .)
    )               reduce using rule 50 (expr -> expr * expr .)
    :               reduce using rule 50 (expr -> expr * expr .)
    BREAK           reduce using rule 50 (expr -> expr * expr .)
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 161

    (51) expr -> expr - expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 51 (expr -> expr - expr .)
    OR              reduce using rule 51 (expr -> expr - expr .)
    AND             reduce using rule 51 (expr -> expr - expr .)
    LE              reduce using rule 51 (expr -> expr - expr .)
    DIFFERENT       reduce using rule 51 (expr -> expr - expr .)
    EQUALS          reduce using rule 51 (expr -> expr - expr .)
    -               reduce using rule 51 (expr -> expr - expr .)
    +               reduce using rule 51 (expr -> expr - expr .)
    .               reduce using rule 51 (expr -> expr - expr .)
    BOOL_CONST      reduce using rule 51 (expr -> expr - expr .)
    STR_CONST       reduce using rule 51 (expr -> expr - expr .)
    FLOAT_CONST     reduce using rule 51 (expr -> expr - expr .)
    INT_CONST       reduce using rule 51 (expr -> expr - expr .)
    OBJECTID        reduce using rule 51 (expr -> expr - expr .)
    NEW             reduce using rule 51 (expr -> expr - expr .)
    {               reduce using rule 51 (expr -> expr - expr .)
    FUNCT           reduce using rule 51 (expr -> expr - expr .)
    SWITCH          reduce using rule 51 (expr -> expr - expr .)
    FOREACH         reduce using rule 51 (expr -> expr - expr .)
    WHILE           reduce using rule 51 (expr -> expr - expr .)
    IF              reduce using rule 51 (expr -> expr - expr .)
    RETURN          reduce using rule 51 (expr -> expr - expr .)
    TYPEID          reduce using rule 51 (expr -> expr - expr .)
    ,               reduce using rule 51 (expr -> expr - expr .)
    }               reduce using rule 51 (expr -> expr - expr .)
    )               reduce using rule 51 (expr -> expr - expr .)
    :               reduce using rule 51 (expr -> expr - expr .)
    BREAK           reduce using rule 51 (expr -> expr - expr .)
    /               shift and go to state 122
    *               shift and go to state 123
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 162

    (52) expr -> expr + expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               reduce using rule 52 (expr -> expr + expr .)
    OR              reduce using rule 52 (expr -> expr + expr .)
    AND             reduce using rule 52 (expr -> expr + expr .)
    LE              reduce using rule 52 (expr -> expr + expr .)
    DIFFERENT       reduce using rule 52 (expr -> expr + expr .)
    EQUALS          reduce using rule 52 (expr -> expr + expr .)
    -               reduce using rule 52 (expr -> expr + expr .)
    +               reduce using rule 52 (expr -> expr + expr .)
    .               reduce using rule 52 (expr -> expr + expr .)
    BOOL_CONST      reduce using rule 52 (expr -> expr + expr .)
    STR_CONST       reduce using rule 52 (expr -> expr + expr .)
    FLOAT_CONST     reduce using rule 52 (expr -> expr + expr .)
    INT_CONST       reduce using rule 52 (expr -> expr + expr .)
    OBJECTID        reduce using rule 52 (expr -> expr + expr .)
    NEW             reduce using rule 52 (expr -> expr + expr .)
    {               reduce using rule 52 (expr -> expr + expr .)
    FUNCT           reduce using rule 52 (expr -> expr + expr .)
    SWITCH          reduce using rule 52 (expr -> expr + expr .)
    FOREACH         reduce using rule 52 (expr -> expr + expr .)
    WHILE           reduce using rule 52 (expr -> expr + expr .)
    IF              reduce using rule 52 (expr -> expr + expr .)
    RETURN          reduce using rule 52 (expr -> expr + expr .)
    TYPEID          reduce using rule 52 (expr -> expr + expr .)
    ,               reduce using rule 52 (expr -> expr + expr .)
    }               reduce using rule 52 (expr -> expr + expr .)
    )               reduce using rule 52 (expr -> expr + expr .)
    :               reduce using rule 52 (expr -> expr + expr .)
    BREAK           reduce using rule 52 (expr -> expr + expr .)
    /               shift and go to state 122
    *               shift and go to state 123
    !               shift and go to state 91

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 163

    (63) expr -> expr . OBJECTID . ( exprApoyo1 ) ;
    (66) expr -> expr . OBJECTID . ( ) ;
    (               shift and go to state 188


state 164

    (53) expr -> NEW TYPEID ( . )
    )               shift and go to state 189


state 165

    (54) expr -> { exprApoyo3 } .
    ;               reduce using rule 54 (expr -> { exprApoyo3 } .)
    OR              reduce using rule 54 (expr -> { exprApoyo3 } .)
    AND             reduce using rule 54 (expr -> { exprApoyo3 } .)
    LE              reduce using rule 54 (expr -> { exprApoyo3 } .)
    DIFFERENT       reduce using rule 54 (expr -> { exprApoyo3 } .)
    EQUALS          reduce using rule 54 (expr -> { exprApoyo3 } .)
    /               reduce using rule 54 (expr -> { exprApoyo3 } .)
    *               reduce using rule 54 (expr -> { exprApoyo3 } .)
    -               reduce using rule 54 (expr -> { exprApoyo3 } .)
    +               reduce using rule 54 (expr -> { exprApoyo3 } .)
    .               reduce using rule 54 (expr -> { exprApoyo3 } .)
    BOOL_CONST      reduce using rule 54 (expr -> { exprApoyo3 } .)
    STR_CONST       reduce using rule 54 (expr -> { exprApoyo3 } .)
    FLOAT_CONST     reduce using rule 54 (expr -> { exprApoyo3 } .)
    INT_CONST       reduce using rule 54 (expr -> { exprApoyo3 } .)
    OBJECTID        reduce using rule 54 (expr -> { exprApoyo3 } .)
    !               reduce using rule 54 (expr -> { exprApoyo3 } .)
    NEW             reduce using rule 54 (expr -> { exprApoyo3 } .)
    {               reduce using rule 54 (expr -> { exprApoyo3 } .)
    FUNCT           reduce using rule 54 (expr -> { exprApoyo3 } .)
    SWITCH          reduce using rule 54 (expr -> { exprApoyo3 } .)
    FOREACH         reduce using rule 54 (expr -> { exprApoyo3 } .)
    WHILE           reduce using rule 54 (expr -> { exprApoyo3 } .)
    IF              reduce using rule 54 (expr -> { exprApoyo3 } .)
    RETURN          reduce using rule 54 (expr -> { exprApoyo3 } .)
    TYPEID          reduce using rule 54 (expr -> { exprApoyo3 } .)
    ,               reduce using rule 54 (expr -> { exprApoyo3 } .)
    }               reduce using rule 54 (expr -> { exprApoyo3 } .)
    )               reduce using rule 54 (expr -> { exprApoyo3 } .)
    :               reduce using rule 54 (expr -> { exprApoyo3 } .)
    BREAK           reduce using rule 54 (expr -> { exprApoyo3 } .)


state 166

    (74) exprApoyo3 -> exprApoyo3 , . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 190
    exprApoyo2                     shift and go to state 86

state 167

    (75) exprApoyo3 -> expr , . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 191
    exprApoyo2                     shift and go to state 86

state 168

    (55) expr -> FUNCT < TYPEID . , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    ,               shift and go to state 192


state 169

    (56) expr -> SWITCH ( expr . ) { cases }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    )               shift and go to state 193
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 170

    (57) expr -> FOREACH ( TYPEID . OBJECTID IN OBJECTID ) { expr }
    OBJECTID        shift and go to state 194


state 171

    (58) expr -> WHILE ( expr . ) { expr }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    )               shift and go to state 195
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 172

    (59) expr -> IF ( expr . ) { expr } ELSE { expr }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    )               shift and go to state 196
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 173

    (60) expr -> RETURN expr ; .
    ;               reduce using rule 60 (expr -> RETURN expr ; .)
    OR              reduce using rule 60 (expr -> RETURN expr ; .)
    AND             reduce using rule 60 (expr -> RETURN expr ; .)
    LE              reduce using rule 60 (expr -> RETURN expr ; .)
    DIFFERENT       reduce using rule 60 (expr -> RETURN expr ; .)
    EQUALS          reduce using rule 60 (expr -> RETURN expr ; .)
    /               reduce using rule 60 (expr -> RETURN expr ; .)
    *               reduce using rule 60 (expr -> RETURN expr ; .)
    -               reduce using rule 60 (expr -> RETURN expr ; .)
    +               reduce using rule 60 (expr -> RETURN expr ; .)
    .               reduce using rule 60 (expr -> RETURN expr ; .)
    BOOL_CONST      reduce using rule 60 (expr -> RETURN expr ; .)
    STR_CONST       reduce using rule 60 (expr -> RETURN expr ; .)
    FLOAT_CONST     reduce using rule 60 (expr -> RETURN expr ; .)
    INT_CONST       reduce using rule 60 (expr -> RETURN expr ; .)
    OBJECTID        reduce using rule 60 (expr -> RETURN expr ; .)
    !               reduce using rule 60 (expr -> RETURN expr ; .)
    NEW             reduce using rule 60 (expr -> RETURN expr ; .)
    {               reduce using rule 60 (expr -> RETURN expr ; .)
    FUNCT           reduce using rule 60 (expr -> RETURN expr ; .)
    SWITCH          reduce using rule 60 (expr -> RETURN expr ; .)
    FOREACH         reduce using rule 60 (expr -> RETURN expr ; .)
    WHILE           reduce using rule 60 (expr -> RETURN expr ; .)
    IF              reduce using rule 60 (expr -> RETURN expr ; .)
    RETURN          reduce using rule 60 (expr -> RETURN expr ; .)
    TYPEID          reduce using rule 60 (expr -> RETURN expr ; .)
    ,               reduce using rule 60 (expr -> RETURN expr ; .)
    }               reduce using rule 60 (expr -> RETURN expr ; .)
    )               reduce using rule 60 (expr -> RETURN expr ; .)
    :               reduce using rule 60 (expr -> RETURN expr ; .)
    BREAK           reduce using rule 60 (expr -> RETURN expr ; .)


state 174

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 197
    exprApoyo2                     shift and go to state 86

state 175

    (25) metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 198
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 176

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 199
    exprApoyo2                     shift and go to state 86

state 177

    (29) metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 200
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 178

    (26) metodo -> MODIFIER VOID OBJECTID ( ) { expr } .
    }               reduce using rule 26 (metodo -> MODIFIER VOID OBJECTID ( ) { expr } .)
    MODIFIER        reduce using rule 26 (metodo -> MODIFIER VOID OBJECTID ( ) { expr } .)


state 179

    (24) metodo -> MODIFIER TYPEID VOID ( formales ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 201
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 180

    (28) metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 202
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 181

    (30) metodo -> MODIFIER TYPEID OBJECTID ( ) { expr } .
    }               reduce using rule 30 (metodo -> MODIFIER TYPEID OBJECTID ( ) { expr } .)
    MODIFIER        reduce using rule 30 (metodo -> MODIFIER TYPEID OBJECTID ( ) { expr } .)


state 182

    (61) expr -> TYPEID . OBJECTID ( . exprApoyo1 ) ;
    (62) expr -> TYPEID . OBJECTID ( . ) ;
    (78) exprApoyo1 -> . expr
    (79) exprApoyo1 -> . exprApoyo1 , expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    )               shift and go to state 204
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    exprApoyo1                     shift and go to state 203
    expr                           shift and go to state 152
    exprApoyo2                     shift and go to state 86

state 183

    (68) expr -> TYPEID OBJECTID ASSIGN expr . ;
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               shift and go to state 205
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 184

    (64) expr -> OBJECTID ( exprApoyo1 ) .
    (65) expr -> OBJECTID ( exprApoyo1 ) . ;
  ! shift/reduce conflict for ; resolved as shift
    OR              reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    AND             reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    LE              reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    DIFFERENT       reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    EQUALS          reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    /               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    *               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    -               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    +               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    .               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    BOOL_CONST      reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    STR_CONST       reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    FLOAT_CONST     reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    INT_CONST       reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    OBJECTID        reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    !               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    NEW             reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    {               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    FUNCT           reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    SWITCH          reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    FOREACH         reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    WHILE           reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    IF              reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    RETURN          reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    TYPEID          reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    ,               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    }               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    )               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    :               reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    BREAK           reduce using rule 64 (expr -> OBJECTID ( exprApoyo1 ) .)
    ;               shift and go to state 206


state 185

    (79) exprApoyo1 -> exprApoyo1 , . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 207
    exprApoyo2                     shift and go to state 86

state 186

    (67) expr -> OBJECTID ( ) ; .
    ;               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    OR              reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    AND             reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    LE              reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    DIFFERENT       reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    EQUALS          reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    /               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    *               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    -               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    +               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    .               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    BOOL_CONST      reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    STR_CONST       reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    FLOAT_CONST     reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    INT_CONST       reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    OBJECTID        reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    !               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    NEW             reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    {               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    FUNCT           reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    SWITCH          reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    FOREACH         reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    WHILE           reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    IF              reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    RETURN          reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    TYPEID          reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    ,               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    }               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    )               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    :               reduce using rule 67 (expr -> OBJECTID ( ) ; .)
    BREAK           reduce using rule 67 (expr -> OBJECTID ( ) ; .)


state 187

    (69) expr -> OBJECTID ASSIGN expr ; .
    ;               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    OR              reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    AND             reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    LE              reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    DIFFERENT       reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    EQUALS          reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    /               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    *               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    -               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    +               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    .               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    BOOL_CONST      reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    STR_CONST       reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    FLOAT_CONST     reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    INT_CONST       reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    OBJECTID        reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    !               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    NEW             reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    {               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    FUNCT           reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    SWITCH          reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    FOREACH         reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    WHILE           reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    IF              reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    RETURN          reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    TYPEID          reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    ,               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    }               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    )               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    :               reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)
    BREAK           reduce using rule 69 (expr -> OBJECTID ASSIGN expr ; .)


state 188

    (63) expr -> expr . OBJECTID ( . exprApoyo1 ) ;
    (66) expr -> expr . OBJECTID ( . ) ;
    (78) exprApoyo1 -> . expr
    (79) exprApoyo1 -> . exprApoyo1 , expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    )               shift and go to state 209
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 152
    exprApoyo1                     shift and go to state 208
    exprApoyo2                     shift and go to state 86

state 189

    (53) expr -> NEW TYPEID ( ) .
    ;               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    OR              reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    AND             reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    LE              reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    DIFFERENT       reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    EQUALS          reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    /               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    *               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    -               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    +               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    .               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    BOOL_CONST      reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    STR_CONST       reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    FLOAT_CONST     reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    INT_CONST       reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    OBJECTID        reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    !               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    NEW             reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    {               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    FUNCT           reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    SWITCH          reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    FOREACH         reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    WHILE           reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    IF              reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    RETURN          reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    TYPEID          reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    ,               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    }               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    )               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    :               reduce using rule 53 (expr -> NEW TYPEID ( ) .)
    BREAK           reduce using rule 53 (expr -> NEW TYPEID ( ) .)


state 190

    (74) exprApoyo3 -> exprApoyo3 , expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               reduce using rule 74 (exprApoyo3 -> exprApoyo3 , expr .)
    ,               reduce using rule 74 (exprApoyo3 -> exprApoyo3 , expr .)
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 191

    (75) exprApoyo3 -> expr , expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               reduce using rule 75 (exprApoyo3 -> expr , expr .)
    ,               reduce using rule 75 (exprApoyo3 -> expr , expr .)
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 192

    (55) expr -> FUNCT < TYPEID , . TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    TYPEID          shift and go to state 210


state 193

    (56) expr -> SWITCH ( expr ) . { cases }
    {               shift and go to state 211


state 194

    (57) expr -> FOREACH ( TYPEID OBJECTID . IN OBJECTID ) { expr }
    IN              shift and go to state 212


state 195

    (58) expr -> WHILE ( expr ) . { expr }
    {               shift and go to state 213


state 196

    (59) expr -> IF ( expr ) . { expr } ELSE { expr }
    {               shift and go to state 214


state 197

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 215
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 198

    (25) metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr } .
    }               reduce using rule 25 (metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr } .)
    MODIFIER        reduce using rule 25 (metodo -> MODIFIER STATIC VOID OBJECTID ( ) { expr } .)


state 199

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 216
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 200

    (29) metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr } .
    }               reduce using rule 29 (metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr } .)
    MODIFIER        reduce using rule 29 (metodo -> MODIFIER STATIC TYPEID OBJECTID ( ) { expr } .)


state 201

    (24) metodo -> MODIFIER TYPEID VOID ( formales ) { expr } .
    }               reduce using rule 24 (metodo -> MODIFIER TYPEID VOID ( formales ) { expr } .)
    MODIFIER        reduce using rule 24 (metodo -> MODIFIER TYPEID VOID ( formales ) { expr } .)


state 202

    (28) metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr } .
    }               reduce using rule 28 (metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr } .)
    MODIFIER        reduce using rule 28 (metodo -> MODIFIER TYPEID OBJECTID ( formales ) { expr } .)


state 203

    (61) expr -> TYPEID . OBJECTID ( exprApoyo1 . ) ;
    (79) exprApoyo1 -> exprApoyo1 . , expr
    )               shift and go to state 217
    ,               shift and go to state 185


state 204

    (62) expr -> TYPEID . OBJECTID ( ) . ;
    ;               shift and go to state 218


state 205

    (68) expr -> TYPEID OBJECTID ASSIGN expr ; .
    ;               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    OR              reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    AND             reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    LE              reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    DIFFERENT       reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    EQUALS          reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    /               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    *               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    -               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    +               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    .               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    BOOL_CONST      reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    STR_CONST       reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    FLOAT_CONST     reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    INT_CONST       reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    OBJECTID        reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    !               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    NEW             reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    {               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    FUNCT           reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    SWITCH          reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    FOREACH         reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    WHILE           reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    IF              reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    RETURN          reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    TYPEID          reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    ,               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    }               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    )               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    :               reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)
    BREAK           reduce using rule 68 (expr -> TYPEID OBJECTID ASSIGN expr ; .)


state 206

    (65) expr -> OBJECTID ( exprApoyo1 ) ; .
    ;               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    OR              reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    AND             reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    LE              reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    DIFFERENT       reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    EQUALS          reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    /               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    *               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    -               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    +               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    .               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    BOOL_CONST      reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    STR_CONST       reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    FLOAT_CONST     reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    INT_CONST       reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    OBJECTID        reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    !               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    NEW             reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    {               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    FUNCT           reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    SWITCH          reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    FOREACH         reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    WHILE           reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    IF              reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    RETURN          reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    TYPEID          reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    ,               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    }               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    )               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    :               reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)
    BREAK           reduce using rule 65 (expr -> OBJECTID ( exprApoyo1 ) ; .)


state 207

    (79) exprApoyo1 -> exprApoyo1 , expr .
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    )               reduce using rule 79 (exprApoyo1 -> exprApoyo1 , expr .)
    ,               reduce using rule 79 (exprApoyo1 -> exprApoyo1 , expr .)
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 208

    (63) expr -> expr . OBJECTID ( exprApoyo1 . ) ;
    (79) exprApoyo1 -> exprApoyo1 . , expr
    )               shift and go to state 219
    ,               shift and go to state 185


state 209

    (66) expr -> expr . OBJECTID ( ) . ;
    ;               shift and go to state 220


state 210

    (55) expr -> FUNCT < TYPEID , TYPEID . > OBJECTID ASSIGN OBJECTID ARROW expr ;
    >               shift and go to state 221


state 211

    (56) expr -> SWITCH ( expr ) { . cases }
    (72) cases -> . case
    (73) cases -> . cases case
    (70) case -> . DEFAULT : expr BREAK ;
    (71) case -> . CASE expr : expr BREAK ;
    DEFAULT         shift and go to state 224
    CASE            shift and go to state 225

    cases                          shift and go to state 222
    case                           shift and go to state 223

state 212

    (57) expr -> FOREACH ( TYPEID OBJECTID IN . OBJECTID ) { expr }
    OBJECTID        shift and go to state 226


state 213

    (58) expr -> WHILE ( expr ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 227
    exprApoyo2                     shift and go to state 86

state 214

    (59) expr -> IF ( expr ) { . expr } ELSE { expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 228
    exprApoyo2                     shift and go to state 86

state 215

    (23) metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr } .
    }               reduce using rule 23 (metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr } .)
    MODIFIER        reduce using rule 23 (metodo -> MODIFIER STATIC VOID OBJECTID ( formales ) { expr } .)


state 216

    (27) metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr } .
    }               reduce using rule 27 (metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr } .)
    MODIFIER        reduce using rule 27 (metodo -> MODIFIER STATIC TYPEID OBJECTID ( formales ) { expr } .)


state 217

    (61) expr -> TYPEID . OBJECTID ( exprApoyo1 ) . ;
    ;               shift and go to state 229


state 218

    (62) expr -> TYPEID . OBJECTID ( ) ; .
    ;               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    OR              reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    AND             reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    LE              reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    DIFFERENT       reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    EQUALS          reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    /               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    *               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    -               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    +               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    .               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    BOOL_CONST      reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    STR_CONST       reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    FLOAT_CONST     reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    INT_CONST       reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    OBJECTID        reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    !               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    NEW             reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    {               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    FUNCT           reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    SWITCH          reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    FOREACH         reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    WHILE           reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    IF              reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    RETURN          reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    TYPEID          reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    ,               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    }               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    )               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    :               reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)
    BREAK           reduce using rule 62 (expr -> TYPEID . OBJECTID ( ) ; .)


state 219

    (63) expr -> expr . OBJECTID ( exprApoyo1 ) . ;
    ;               shift and go to state 230


state 220

    (66) expr -> expr . OBJECTID ( ) ; .
    ;               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    OR              reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    AND             reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    LE              reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    DIFFERENT       reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    EQUALS          reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    /               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    *               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    -               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    +               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    .               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    BOOL_CONST      reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    STR_CONST       reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    FLOAT_CONST     reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    INT_CONST       reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    OBJECTID        reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    !               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    NEW             reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    {               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    FUNCT           reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    SWITCH          reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    FOREACH         reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    WHILE           reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    IF              reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    RETURN          reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    TYPEID          reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    ,               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    }               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    )               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    :               reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)
    BREAK           reduce using rule 66 (expr -> expr . OBJECTID ( ) ; .)


state 221

    (55) expr -> FUNCT < TYPEID , TYPEID > . OBJECTID ASSIGN OBJECTID ARROW expr ;
    OBJECTID        shift and go to state 231


state 222

    (56) expr -> SWITCH ( expr ) { cases . }
    (73) cases -> cases . case
    (70) case -> . DEFAULT : expr BREAK ;
    (71) case -> . CASE expr : expr BREAK ;
    }               shift and go to state 232
    DEFAULT         shift and go to state 224
    CASE            shift and go to state 225

    case                           shift and go to state 233

state 223

    (72) cases -> case .
    }               reduce using rule 72 (cases -> case .)
    DEFAULT         reduce using rule 72 (cases -> case .)
    CASE            reduce using rule 72 (cases -> case .)


state 224

    (70) case -> DEFAULT . : expr BREAK ;
    :               shift and go to state 234


state 225

    (71) case -> CASE . expr : expr BREAK ;
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 235
    exprApoyo2                     shift and go to state 86

state 226

    (57) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID . ) { expr }
    )               shift and go to state 236


state 227

    (58) expr -> WHILE ( expr ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 237
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 228

    (59) expr -> IF ( expr ) { expr . } ELSE { expr }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 238
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 229

    (61) expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .
    ;               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    OR              reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    AND             reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    LE              reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    DIFFERENT       reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    EQUALS          reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    /               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    *               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    -               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    +               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    .               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    BOOL_CONST      reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    STR_CONST       reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    FLOAT_CONST     reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    INT_CONST       reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    OBJECTID        reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    !               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    NEW             reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    {               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    FUNCT           reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    SWITCH          reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    FOREACH         reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    WHILE           reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    IF              reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    RETURN          reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    TYPEID          reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    ,               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    }               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    )               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    :               reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)
    BREAK           reduce using rule 61 (expr -> TYPEID . OBJECTID ( exprApoyo1 ) ; .)


state 230

    (63) expr -> expr . OBJECTID ( exprApoyo1 ) ; .
    ;               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    OR              reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    AND             reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    LE              reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    DIFFERENT       reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    EQUALS          reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    /               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    *               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    -               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    +               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    .               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    BOOL_CONST      reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    STR_CONST       reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    FLOAT_CONST     reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    INT_CONST       reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    OBJECTID        reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    !               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    NEW             reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    {               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    FUNCT           reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    SWITCH          reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    FOREACH         reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    WHILE           reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    IF              reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    RETURN          reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    TYPEID          reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    ,               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    }               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    )               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    :               reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)
    BREAK           reduce using rule 63 (expr -> expr . OBJECTID ( exprApoyo1 ) ; .)


state 231

    (55) expr -> FUNCT < TYPEID , TYPEID > OBJECTID . ASSIGN OBJECTID ARROW expr ;
    ASSIGN          shift and go to state 239


state 232

    (56) expr -> SWITCH ( expr ) { cases } .
    ;               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    OR              reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    AND             reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    LE              reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    DIFFERENT       reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    EQUALS          reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    /               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    *               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    -               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    +               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    .               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    BOOL_CONST      reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    STR_CONST       reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    FLOAT_CONST     reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    INT_CONST       reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    OBJECTID        reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    !               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    NEW             reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    {               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    FUNCT           reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    SWITCH          reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    FOREACH         reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    WHILE           reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    IF              reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    RETURN          reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    TYPEID          reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    ,               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    }               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    )               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    :               reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)
    BREAK           reduce using rule 56 (expr -> SWITCH ( expr ) { cases } .)


state 233

    (73) cases -> cases case .
    }               reduce using rule 73 (cases -> cases case .)
    DEFAULT         reduce using rule 73 (cases -> cases case .)
    CASE            reduce using rule 73 (cases -> cases case .)


state 234

    (70) case -> DEFAULT : . expr BREAK ;
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 240
    exprApoyo2                     shift and go to state 86

state 235

    (71) case -> CASE expr . : expr BREAK ;
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    :               shift and go to state 241
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 236

    (57) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) . { expr }
    {               shift and go to state 242


state 237

    (58) expr -> WHILE ( expr ) { expr } .
    ;               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    OR              reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    AND             reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    LE              reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    DIFFERENT       reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    EQUALS          reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    /               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    *               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    -               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    +               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    .               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    BOOL_CONST      reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    STR_CONST       reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    FLOAT_CONST     reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    INT_CONST       reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    OBJECTID        reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    !               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    NEW             reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    {               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    FUNCT           reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    SWITCH          reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    FOREACH         reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    WHILE           reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    IF              reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    RETURN          reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    TYPEID          reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    ,               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    }               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    )               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    :               reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)
    BREAK           reduce using rule 58 (expr -> WHILE ( expr ) { expr } .)


state 238

    (59) expr -> IF ( expr ) { expr } . ELSE { expr }
    ELSE            shift and go to state 243


state 239

    (55) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN . OBJECTID ARROW expr ;
    OBJECTID        shift and go to state 244


state 240

    (70) case -> DEFAULT : expr . BREAK ;
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BREAK           shift and go to state 245
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 241

    (71) case -> CASE expr : . expr BREAK ;
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 246
    exprApoyo2                     shift and go to state 86

state 242

    (57) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 247
    exprApoyo2                     shift and go to state 86

state 243

    (59) expr -> IF ( expr ) { expr } ELSE . { expr }
    {               shift and go to state 248


state 244

    (55) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID . ARROW expr ;
    ARROW           shift and go to state 249


state 245

    (70) case -> DEFAULT : expr BREAK . ;
    ;               shift and go to state 250


state 246

    (71) case -> CASE expr : expr . BREAK ;
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BREAK           shift and go to state 251
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 247

    (57) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 252
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 248

    (59) expr -> IF ( expr ) { expr } ELSE { . expr }
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 253
    exprApoyo2                     shift and go to state 86

state 249

    (55) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW . expr ;
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 254
    exprApoyo2                     shift and go to state 86

state 250

    (70) case -> DEFAULT : expr BREAK ; .
    }               reduce using rule 70 (case -> DEFAULT : expr BREAK ; .)
    DEFAULT         reduce using rule 70 (case -> DEFAULT : expr BREAK ; .)
    CASE            reduce using rule 70 (case -> DEFAULT : expr BREAK ; .)


state 251

    (71) case -> CASE expr : expr BREAK . ;
    ;               shift and go to state 255


state 252

    (57) expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .
    ;               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    OR              reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    AND             reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    LE              reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    DIFFERENT       reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    EQUALS          reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    /               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    *               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    -               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    +               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    .               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    BOOL_CONST      reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    STR_CONST       reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    FLOAT_CONST     reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    INT_CONST       reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    OBJECTID        reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    !               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    NEW             reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    {               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    FUNCT           reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    SWITCH          reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    FOREACH         reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    WHILE           reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    IF              reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    RETURN          reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    TYPEID          reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    ,               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    }               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    )               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    :               reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)
    BREAK           reduce using rule 57 (expr -> FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr } .)


state 253

    (59) expr -> IF ( expr ) { expr } ELSE { expr . }
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    }               shift and go to state 256
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 254

    (55) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr . ;
    (43) expr -> expr . OR expr
    (44) expr -> expr . AND expr
    (45) expr -> expr . LE expr
    (46) expr -> expr . DIFFERENT expr
    (47) expr -> expr . EQUALS expr
    (49) expr -> expr . / expr
    (50) expr -> expr . * expr
    (51) expr -> expr . - expr
    (52) expr -> expr . + expr
    (63) expr -> expr . . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> expr . . OBJECTID ( ) ;
    (77) exprApoyo2 -> expr . expr
    (37) expr -> . exprApoyo2
    (38) expr -> . BOOL_CONST
    (39) expr -> . STR_CONST
    (40) expr -> . FLOAT_CONST
    (41) expr -> . INT_CONST
    (42) expr -> . OBJECTID
    (43) expr -> . expr OR expr
    (44) expr -> . expr AND expr
    (45) expr -> . expr LE expr
    (46) expr -> . expr DIFFERENT expr
    (47) expr -> . expr EQUALS expr
    (48) expr -> . ! expr
    (49) expr -> . expr / expr
    (50) expr -> . expr * expr
    (51) expr -> . expr - expr
    (52) expr -> . expr + expr
    (53) expr -> . NEW TYPEID ( )
    (54) expr -> . { exprApoyo3 }
    (55) expr -> . FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ;
    (56) expr -> . SWITCH ( expr ) { cases }
    (57) expr -> . FOREACH ( TYPEID OBJECTID IN OBJECTID ) { expr }
    (58) expr -> . WHILE ( expr ) { expr }
    (59) expr -> . IF ( expr ) { expr } ELSE { expr }
    (60) expr -> . RETURN expr ;
    (61) expr -> . TYPEID . OBJECTID ( exprApoyo1 ) ;
    (62) expr -> . TYPEID . OBJECTID ( ) ;
    (63) expr -> . expr . OBJECTID ( exprApoyo1 ) ;
    (64) expr -> . OBJECTID ( exprApoyo1 )
    (65) expr -> . OBJECTID ( exprApoyo1 ) ;
    (66) expr -> . expr . OBJECTID ( ) ;
    (67) expr -> . OBJECTID ( ) ;
    (68) expr -> . TYPEID OBJECTID ASSIGN expr ;
    (69) expr -> . OBJECTID ASSIGN expr ;
    (76) exprApoyo2 -> . exprApoyo2 expr
    (77) exprApoyo2 -> . expr expr
    ;               shift and go to state 257
    OR              shift and go to state 117
    AND             shift and go to state 118
    LE              shift and go to state 119
    DIFFERENT       shift and go to state 120
    EQUALS          shift and go to state 121
    /               shift and go to state 122
    *               shift and go to state 123
    -               shift and go to state 124
    +               shift and go to state 125
    .               shift and go to state 126
    BOOL_CONST      shift and go to state 87
    STR_CONST       shift and go to state 88
    FLOAT_CONST     shift and go to state 89
    INT_CONST       shift and go to state 90
    OBJECTID        shift and go to state 84
    !               shift and go to state 91
    NEW             shift and go to state 92
    {               shift and go to state 93
    FUNCT           shift and go to state 94
    SWITCH          shift and go to state 95
    FOREACH         shift and go to state 96
    WHILE           shift and go to state 97
    IF              shift and go to state 98
    RETURN          shift and go to state 99
    TYPEID          shift and go to state 83

    expr                           shift and go to state 115
    exprApoyo2                     shift and go to state 86

state 255

    (71) case -> CASE expr : expr BREAK ; .
    }               reduce using rule 71 (case -> CASE expr : expr BREAK ; .)
    DEFAULT         reduce using rule 71 (case -> CASE expr : expr BREAK ; .)
    CASE            reduce using rule 71 (case -> CASE expr : expr BREAK ; .)


state 256

    (59) expr -> IF ( expr ) { expr } ELSE { expr } .
    ;               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    OR              reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    AND             reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    LE              reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    DIFFERENT       reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    EQUALS          reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    /               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    *               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    -               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    +               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    .               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    BOOL_CONST      reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    STR_CONST       reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    FLOAT_CONST     reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    INT_CONST       reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    OBJECTID        reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    !               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    NEW             reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    {               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    FUNCT           reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    SWITCH          reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    FOREACH         reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    WHILE           reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    IF              reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    RETURN          reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    TYPEID          reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    ,               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    }               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    )               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    :               reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)
    BREAK           reduce using rule 59 (expr -> IF ( expr ) { expr } ELSE { expr } .)


state 257

    (55) expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .
    ;               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    OR              reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    AND             reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    LE              reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    DIFFERENT       reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    EQUALS          reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    /               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    *               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    -               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    +               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    .               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    BOOL_CONST      reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    STR_CONST       reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    FLOAT_CONST     reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    INT_CONST       reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    OBJECTID        reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    !               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    NEW             reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    {               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    FUNCT           reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    SWITCH          reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    FOREACH         reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    WHILE           reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    IF              reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    RETURN          reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    TYPEID          reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    ,               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    }               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    )               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    :               reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)
    BREAK           reduce using rule 55 (expr -> FUNCT < TYPEID , TYPEID > OBJECTID ASSIGN OBJECTID ARROW expr ; .)


Conflicts:

shift/reduce conflict for BOOL_CONST in state 86 resolved as shift
shift/reduce conflict for STR_CONST in state 86 resolved as shift
shift/reduce conflict for FLOAT_CONST in state 86 resolved as shift
shift/reduce conflict for INT_CONST in state 86 resolved as shift
shift/reduce conflict for OBJECTID in state 86 resolved as shift
shift/reduce conflict for ! in state 86 resolved as shift
shift/reduce conflict for NEW in state 86 resolved as shift
shift/reduce conflict for { in state 86 resolved as shift
shift/reduce conflict for FUNCT in state 86 resolved as shift
shift/reduce conflict for SWITCH in state 86 resolved as shift
shift/reduce conflict for FOREACH in state 86 resolved as shift
shift/reduce conflict for WHILE in state 86 resolved as shift
shift/reduce conflict for IF in state 86 resolved as shift
shift/reduce conflict for RETURN in state 86 resolved as shift
shift/reduce conflict for TYPEID in state 86 resolved as shift
shift/reduce conflict for OR in state 115 resolved as shift
shift/reduce conflict for AND in state 115 resolved as shift
shift/reduce conflict for LE in state 115 resolved as shift
shift/reduce conflict for DIFFERENT in state 115 resolved as shift
shift/reduce conflict for EQUALS in state 115 resolved as shift
shift/reduce conflict for / in state 115 resolved as shift
shift/reduce conflict for * in state 115 resolved as shift
shift/reduce conflict for - in state 115 resolved as shift
shift/reduce conflict for + in state 115 resolved as shift
shift/reduce conflict for . in state 115 resolved as shift
shift/reduce conflict for BOOL_CONST in state 115 resolved as shift
shift/reduce conflict for STR_CONST in state 115 resolved as shift
shift/reduce conflict for FLOAT_CONST in state 115 resolved as shift
shift/reduce conflict for INT_CONST in state 115 resolved as shift
shift/reduce conflict for OBJECTID in state 115 resolved as shift
shift/reduce conflict for ! in state 115 resolved as shift
shift/reduce conflict for NEW in state 115 resolved as shift
shift/reduce conflict for { in state 115 resolved as shift
shift/reduce conflict for FUNCT in state 115 resolved as shift
shift/reduce conflict for SWITCH in state 115 resolved as shift
shift/reduce conflict for FOREACH in state 115 resolved as shift
shift/reduce conflict for WHILE in state 115 resolved as shift
shift/reduce conflict for IF in state 115 resolved as shift
shift/reduce conflict for RETURN in state 115 resolved as shift
shift/reduce conflict for TYPEID in state 115 resolved as shift
shift/reduce conflict for OR in state 127 resolved as shift
shift/reduce conflict for AND in state 127 resolved as shift
shift/reduce conflict for LE in state 127 resolved as shift
shift/reduce conflict for DIFFERENT in state 127 resolved as shift
shift/reduce conflict for EQUALS in state 127 resolved as shift
shift/reduce conflict for / in state 127 resolved as shift
shift/reduce conflict for * in state 127 resolved as shift
shift/reduce conflict for - in state 127 resolved as shift
shift/reduce conflict for + in state 127 resolved as shift
shift/reduce conflict for . in state 127 resolved as shift
shift/reduce conflict for BOOL_CONST in state 127 resolved as shift
shift/reduce conflict for STR_CONST in state 127 resolved as shift
shift/reduce conflict for FLOAT_CONST in state 127 resolved as shift
shift/reduce conflict for INT_CONST in state 127 resolved as shift
shift/reduce conflict for OBJECTID in state 127 resolved as shift
shift/reduce conflict for ! in state 127 resolved as shift
shift/reduce conflict for NEW in state 127 resolved as shift
shift/reduce conflict for { in state 127 resolved as shift
shift/reduce conflict for FUNCT in state 127 resolved as shift
shift/reduce conflict for SWITCH in state 127 resolved as shift
shift/reduce conflict for FOREACH in state 127 resolved as shift
shift/reduce conflict for WHILE in state 127 resolved as shift
shift/reduce conflict for IF in state 127 resolved as shift
shift/reduce conflict for RETURN in state 127 resolved as shift
shift/reduce conflict for TYPEID in state 127 resolved as shift
shift/reduce conflict for ; in state 184 resolved as shift